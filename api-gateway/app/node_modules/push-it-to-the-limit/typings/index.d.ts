declare module 'push-it-to-the-limit' {
  /** */
  export * from 'push-it-to-the-limit/target/es6';
}
// Generated by dts-bundle v0.7.5

declare module 'push-it-to-the-limit/target/es5' {
    export * from 'push-it-to-the-limit/target/es5/interface';
    export * from 'push-it-to-the-limit/target/es5/common';
    export { DEFAULT_DELAY, REJECTED, REJECTED_ON_CANCEL } from 'push-it-to-the-limit/target/es5/common';
    export { Limiter } from 'push-it-to-the-limit/target/es5/limiter';
    export { debounce } from 'push-it-to-the-limit/target/es5/wrappers/debounce';
    export { delay } from 'push-it-to-the-limit/target/es5/wrappers/delay';
    export { ratelimit } from 'push-it-to-the-limit/target/es5/wrappers/ratelimit';
    export { repeat } from 'push-it-to-the-limit/target/es5/wrappers/repeat';
    export { stabilize } from 'push-it-to-the-limit/target/es5/wrappers/stabilize';
    export { throttle } from 'push-it-to-the-limit/target/es5/wrappers/throttle';
}

declare module 'push-it-to-the-limit/target/es5/interface' {
    export type IAny = any;
    export type IBasicDelay = number;
    export type IComplexDelay = {
        period: number;
        count: number;
    };
    export type TimeoutID = ReturnType<typeof setTimeout>;
    export type IMixedDelays = Array<IBasicDelay | IComplexDelay>;
    export type INormalizedDelays = Array<IComplexDelay>;
    export type IDelay = number;
    export type ITarget = (...args: IAny[]) => IAny;
    export type ILimit = IComplexDelay & {
        ttl: number;
        rest: number;
        timeout?: TimeoutID;
    };
    export type ILimitStack = Array<ILimit>;
    export type ICall = {
        fail: () => void;
        complete: () => void;
    };
    export type ICallStack = Array<ICall>;
    export type IResolve = (value: IAny) => void;
    export type IReject = (value: IAny) => void;
    export type IControlled<T = Record<any, any>> = T & {
        (...args: IAny[]): Promise<IAny>;
        flush(): void;
        cancel(): void;
    };
    export type ILodashOpts = {
        leading?: boolean;
        trailing?: boolean;
        maxWait?: IBasicDelay;
    };
    export type IOrder = 'fifo' | 'lifo';
    export interface ILimiter {
        limits: ILimitStack;
        getNextDelay(): number;
        reset(): void;
        resetTtl(): void;
        decrease(): void;
        isAllowed(): boolean;
        getNextQueueSize(): number;
    }
    export type IWrapperOpts = {
        delay: IDelay | IComplexDelay;
        limit?: ILimit | ILimitStack;
        context?: IAny;
        rejectOnCancel?: boolean;
        order?: IOrder;
        limiter?: ILimiter;
    } & ILodashOpts;
    export type IWrapper = (fn: ITarget, opts: IWrapperOpts) => IControlled;
    export type IExposedWrapper = {
        (fn: ITarget, opts: IWrapperOpts): IControlled;
        (fn: ITarget, delay: IDelay, opts?: ILodashOpts): IControlled;
        (fn: ITarget, delay: IComplexDelay, opts?: ILodashOpts): IControlled;
        (fn: ITarget, limit: ILimitStack | ILimit, opts?: ILodashOpts): IControlled;
    };
    export type Nullable<T> = T | null;
    export type NotAlwaysDefined<T> = T | undefined;
    export type Optional<T> = Nullable<T> | NotAlwaysDefined<T>;
}

declare module 'push-it-to-the-limit/target/es5/common' {
    import type { IAny, IBasicDelay, IComplexDelay, IExposedWrapper, ILimit, ILimitStack, IMixedDelays, INormalizedDelays, IReject, IResolve, ITarget, IWrapper, Optional, TimeoutID } from 'push-it-to-the-limit/target/es5/interface';
    export function complete(resolve: IResolve, fn: ITarget, args: IAny[], context?: IAny): void;
    export const REJECTED = "Rejected";
    export function fail(reject: IReject, message?: string): void;
    export const REJECTED_ON_CANCEL = "Rejected on cancel";
    export function failOnCancel(reject: IReject): void;
    export const DEFAULT_DELAY = 0;
    export function adapter(wrapper: IWrapper): IExposedWrapper;
    export function assert(condition: boolean, text?: string): void;
    export function assertFn(target: IAny): void;
    export function dropTimeout(timeout: Optional<TimeoutID>): void;
    export function normalizeDelay(delay?: IBasicDelay | IComplexDelay | IMixedDelays | INormalizedDelays | ILimit | ILimitStack): INormalizedDelays;
}

declare module 'push-it-to-the-limit/target/es5/limiter' {
    import type { IComplexDelay, ILimit, ILimiter, ILimitStack } from 'push-it-to-the-limit/target/es5/interface';
    export class Limiter implements ILimiter {
        limits: ILimitStack;
        constructor(items: Array<Limiter | IComplexDelay>);
        decrease(): void;
        reset(): void;
        resetTtl(): void;
        isAllowed(): boolean;
        getNextDelay(): number;
        getNextQueueSize(): number;
        static refreshLimit(limit: ILimit): ILimit;
        static refreshTtl(limit: ILimit): void;
    }
}

declare module 'push-it-to-the-limit/target/es5/wrappers/debounce' {
    import { IExposedWrapper } from 'push-it-to-the-limit/target/es5/interface';
    export const DEFAULT_OPTS: {
        leading: boolean;
        trailing: boolean;
    };
    export const debounce: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es5/wrappers/delay' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es5/interface';
    export const delay: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es5/wrappers/ratelimit' {
    import type { ICallStack, IExposedWrapper, ILimiter, TimeoutID } from 'push-it-to-the-limit/target/es5/interface';
    export type IProcessor = (calls: ICallStack, limiter: ILimiter) => void;
    export const ratelimit: IExposedWrapper;
    export function invokeToTheLimit(calls: ICallStack, limiter: ILimiter): void;
    export function refreshTimeouts(calls: ICallStack, limiter: ILimiter, handler: IProcessor): TimeoutID;
    export function processTimeouts(calls: ICallStack, limiter: ILimiter, handler: IProcessor): TimeoutID | undefined;
}

declare module 'push-it-to-the-limit/target/es5/wrappers/repeat' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es5/interface';
    export const repeat: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es5/wrappers/stabilize' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es5/interface';
    export const stabilize: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es5/wrappers/throttle' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es5/interface';
    export const throttle: IExposedWrapper;
}

// Generated by dts-bundle v0.7.5

declare module 'push-it-to-the-limit/target/es6' {
    export * from 'push-it-to-the-limit/target/es6/interface';
    export * from 'push-it-to-the-limit/target/es6/common';
    export { DEFAULT_DELAY, REJECTED, REJECTED_ON_CANCEL } from 'push-it-to-the-limit/target/es6/common';
    export { Limiter } from 'push-it-to-the-limit/target/es6/limiter';
    export { debounce } from 'push-it-to-the-limit/target/es6/wrappers/debounce';
    export { delay } from 'push-it-to-the-limit/target/es6/wrappers/delay';
    export { ratelimit } from 'push-it-to-the-limit/target/es6/wrappers/ratelimit';
    export { repeat } from 'push-it-to-the-limit/target/es6/wrappers/repeat';
    export { stabilize } from 'push-it-to-the-limit/target/es6/wrappers/stabilize';
    export { throttle } from 'push-it-to-the-limit/target/es6/wrappers/throttle';
}

declare module 'push-it-to-the-limit/target/es6/interface' {
    export type IAny = any;
    export type IBasicDelay = number;
    export type IComplexDelay = {
        period: number;
        count: number;
    };
    export type TimeoutID = ReturnType<typeof setTimeout>;
    export type IMixedDelays = Array<IBasicDelay | IComplexDelay>;
    export type INormalizedDelays = Array<IComplexDelay>;
    export type IDelay = number;
    export type ITarget = (...args: IAny[]) => IAny;
    export type ILimit = IComplexDelay & {
        ttl: number;
        rest: number;
        timeout?: TimeoutID;
    };
    export type ILimitStack = Array<ILimit>;
    export type ICall = {
        fail: () => void;
        complete: () => void;
    };
    export type ICallStack = Array<ICall>;
    export type IResolve = (value: IAny) => void;
    export type IReject = (value: IAny) => void;
    export type IControlled<T = Record<any, any>> = T & {
        (...args: IAny[]): Promise<IAny>;
        flush(): void;
        cancel(): void;
    };
    export type ILodashOpts = {
        leading?: boolean;
        trailing?: boolean;
        maxWait?: IBasicDelay;
    };
    export type IOrder = 'fifo' | 'lifo';
    export interface ILimiter {
        limits: ILimitStack;
        getNextDelay(): number;
        reset(): void;
        resetTtl(): void;
        decrease(): void;
        isAllowed(): boolean;
        getNextQueueSize(): number;
    }
    export type IWrapperOpts = {
        delay: IDelay | IComplexDelay;
        limit?: ILimit | ILimitStack;
        context?: IAny;
        rejectOnCancel?: boolean;
        order?: IOrder;
        limiter?: ILimiter;
    } & ILodashOpts;
    export type IWrapper = (fn: ITarget, opts: IWrapperOpts) => IControlled;
    export type IExposedWrapper = {
        (fn: ITarget, opts: IWrapperOpts): IControlled;
        (fn: ITarget, delay: IDelay, opts?: ILodashOpts): IControlled;
        (fn: ITarget, delay: IComplexDelay, opts?: ILodashOpts): IControlled;
        (fn: ITarget, limit: ILimitStack | ILimit, opts?: ILodashOpts): IControlled;
    };
    export type Nullable<T> = T | null;
    export type NotAlwaysDefined<T> = T | undefined;
    export type Optional<T> = Nullable<T> | NotAlwaysDefined<T>;
}

declare module 'push-it-to-the-limit/target/es6/common' {
    import type { IAny, IBasicDelay, IComplexDelay, IExposedWrapper, ILimit, ILimitStack, IMixedDelays, INormalizedDelays, IReject, IResolve, ITarget, IWrapper, Optional, TimeoutID } from 'push-it-to-the-limit/target/es6/interface';
    export function complete(resolve: IResolve, fn: ITarget, args: IAny[], context?: IAny): void;
    export const REJECTED = "Rejected";
    export function fail(reject: IReject, message?: string): void;
    export const REJECTED_ON_CANCEL = "Rejected on cancel";
    export function failOnCancel(reject: IReject): void;
    export const DEFAULT_DELAY = 0;
    export function adapter(wrapper: IWrapper): IExposedWrapper;
    export function assert(condition: boolean, text?: string): void;
    export function assertFn(target: IAny): void;
    export function dropTimeout(timeout: Optional<TimeoutID>): void;
    export function normalizeDelay(delay?: IBasicDelay | IComplexDelay | IMixedDelays | INormalizedDelays | ILimit | ILimitStack): INormalizedDelays;
}

declare module 'push-it-to-the-limit/target/es6/limiter' {
    import type { IComplexDelay, ILimit, ILimiter, ILimitStack } from 'push-it-to-the-limit/target/es6/interface';
    export class Limiter implements ILimiter {
        limits: ILimitStack;
        constructor(items: Array<Limiter | IComplexDelay>);
        decrease(): void;
        reset(): void;
        resetTtl(): void;
        isAllowed(): boolean;
        getNextDelay(): number;
        getNextQueueSize(): number;
        static refreshLimit(limit: ILimit): ILimit;
        static refreshTtl(limit: ILimit): void;
    }
}

declare module 'push-it-to-the-limit/target/es6/wrappers/debounce' {
    import { IExposedWrapper } from 'push-it-to-the-limit/target/es6/interface';
    export const DEFAULT_OPTS: {
        leading: boolean;
        trailing: boolean;
    };
    export const debounce: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es6/wrappers/delay' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es6/interface';
    export const delay: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es6/wrappers/ratelimit' {
    import type { ICallStack, IExposedWrapper, ILimiter, TimeoutID } from 'push-it-to-the-limit/target/es6/interface';
    export type IProcessor = (calls: ICallStack, limiter: ILimiter) => void;
    export const ratelimit: IExposedWrapper;
    export function invokeToTheLimit(calls: ICallStack, limiter: ILimiter): void;
    export function refreshTimeouts(calls: ICallStack, limiter: ILimiter, handler: IProcessor): TimeoutID;
    export function processTimeouts(calls: ICallStack, limiter: ILimiter, handler: IProcessor): TimeoutID | undefined;
}

declare module 'push-it-to-the-limit/target/es6/wrappers/repeat' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es6/interface';
    export const repeat: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es6/wrappers/stabilize' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es6/interface';
    export const stabilize: IExposedWrapper;
}

declare module 'push-it-to-the-limit/target/es6/wrappers/throttle' {
    import type { IExposedWrapper } from 'push-it-to-the-limit/target/es6/interface';
    export const throttle: IExposedWrapper;
}

