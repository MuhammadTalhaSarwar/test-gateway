import type { IAny, IBasicDelay, IComplexDelay, IExposedWrapper, ILimit, ILimitStack, IMixedDelays, INormalizedDelays, IReject, IResolve, ITarget, IWrapper, Optional, TimeoutID } from './interface';
export declare function complete(resolve: IResolve, fn: ITarget, args: IAny[], context?: IAny): void;
export declare const REJECTED = "Rejected";
export declare function fail(reject: IReject, message?: string): void;
export declare const REJECTED_ON_CANCEL = "Rejected on cancel";
export declare function failOnCancel(reject: IReject): void;
export declare const DEFAULT_DELAY = 0;
export declare function adapter(wrapper: IWrapper): IExposedWrapper;
export declare function assert(condition: boolean, text?: string): void;
export declare function assertFn(target: IAny): void;
export declare function dropTimeout(timeout: Optional<TimeoutID>): void;
export declare function normalizeDelay(delay?: IBasicDelay | IComplexDelay | IMixedDelays | INormalizedDelays | ILimit | ILimitStack): INormalizedDelays;
