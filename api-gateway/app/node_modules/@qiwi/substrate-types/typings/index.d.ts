declare module '@qiwi/substrate-types' {
  /** */
  export * from '@qiwi/substrate-types/target/es6';
}
// Generated by dts-bundle v0.7.5

declare module '@qiwi/substrate-types/target/es5' {
    export * from '@qiwi/substrate-types/target/es5/export';
    export * from '@qiwi/substrate-types/target/es5/aliases';
    export * from '@qiwi/substrate-types/target/es5/helpers';
    export * from '@qiwi/substrate-types/target/es5/extras';
}

declare module '@qiwi/substrate-types/target/es5/export' {
    export { IStringMap } from '@qiwi/substrate-types/target/es5/IStringMap';
    export { IAnyMap } from '@qiwi/substrate-types/target/es5/IAnyMap';
    export { IEventEmitter } from '@qiwi/substrate-types/target/es5/IEventEmitter';
    export { ILogger, LogLevel, ILoggerMethod } from '@qiwi/substrate-types/target/es5/ILogger';
    export { TUtilGet } from '@qiwi/substrate-types/target/es5/IUtilGet';
    export { TUtilSet } from '@qiwi/substrate-types/target/es5/IUtilSet';
    export { TUtilEach } from '@qiwi/substrate-types/target/es5/IUtilEach';
    export { TUtilMap } from '@qiwi/substrate-types/target/es5/IUtilMap';
    export { ICloneable } from '@qiwi/substrate-types/target/es5/ICloneable';
    export { ICurrency } from '@qiwi/substrate-types/target/es5/ICurrency';
    export { IPromiseConstructor, IPromise } from '@qiwi/substrate-types/target/es5/IPromise';
    export { IStorage } from '@qiwi/substrate-types/target/es5/IStorage';
    export { IMoney } from '@qiwi/substrate-types/target/es5/IMoney';
    export { IStack } from '@qiwi/substrate-types/target/es5/IStack';
    export { ICollection } from '@qiwi/substrate-types/target/es5/ICollection';
    export { TPredicate } from '@qiwi/substrate-types/target/es5/TPredicate';
    export { IConfigurable } from '@qiwi/substrate-types/target/es5/IConfigurable';
    export { IConfig } from '@qiwi/substrate-types/target/es5/IConfig';
    export { IConstructor, IConstructable, Abstract, IClass } from '@qiwi/substrate-types/target/es5/IConstructor';
    export { IIterable, IIterator, IIteratorResult } from '@qiwi/substrate-types/target/es5/IIterable';
    export { IMiddleware, IAsyncMiddleware, IErrorMiddleware, IRequestMiddleware, IRequest, IResponse, INext, } from '@qiwi/substrate-types/target/es5/IMiddleware';
    export { IPool, IPooledObject, IPooledObjectFactory, IPooledObjectStatus, } from '@qiwi/substrate-types/target/es5/IPool';
    export { IHttpClient, IFetch, IHttpRequestProvider, HttpMethod, IHttpResponse, IHttpRequest, } from '@qiwi/substrate-types/target/es5/IHttpClient';
    export { IClientEventDto, IClientEventMeta, EnvironmentProfile, } from '@qiwi/substrate-types/target/es5/IClientEventDto';
    export { INormalValue, IIdentified, IMetaTyped, IMetaTypedValue, IWrappedValue, ITyped, ITypedValue, IMeted, IMetedValue, } from '@qiwi/substrate-types/target/es5/INormalValue';
    export { IFunction, IFn, IUnaryFunction, IUnaryFn, ICallable, } from '@qiwi/substrate-types/target/es5/IFunction';
    export { IMetadataProvider } from '@qiwi/substrate-types/target/es5/IMetadata';
    export { IEnableable } from '@qiwi/substrate-types/target/es5/IEnableable';
    export { IPipe, IPipeline, INormalPipe, INormalPipeline } from '@qiwi/substrate-types/target/es5/IPipeline';
    export { IExtra } from '@qiwi/substrate-types/target/es5/IExtra';
    export { INil, INullOrUndefined, INullable, INilable } from '@qiwi/substrate-types/target/es5/INil';
    export { IExecutionMode } from '@qiwi/substrate-types/target/es5/IExecutionMode';
    export { IDeviceInfo, IDeviceInfoStrict } from '@qiwi/substrate-types/target/es5/IDeviceInfo';
}

declare module '@qiwi/substrate-types/target/es5/aliases' {
    export { IStringMap as StringMap } from '@qiwi/substrate-types/target/es5/IStringMap';
    export { IAnyMap as AnyMap } from '@qiwi/substrate-types/target/es5/IAnyMap';
    export { IEventEmitter as EventEmitter } from '@qiwi/substrate-types/target/es5/IEventEmitter';
    export { ILogger as Logger, LogLevel, ILoggerMethod as LoggerMethod } from '@qiwi/substrate-types/target/es5/ILogger';
    export { TUtilGet as UtilGet } from '@qiwi/substrate-types/target/es5/IUtilGet';
    export { TUtilSet as UtilSet } from '@qiwi/substrate-types/target/es5/IUtilSet';
    export { TUtilEach as UtilEach } from '@qiwi/substrate-types/target/es5/IUtilEach';
    export { TUtilMap as UtilMap } from '@qiwi/substrate-types/target/es5/IUtilMap';
    export { ICloneable as Cloneable } from '@qiwi/substrate-types/target/es5/ICloneable';
    export { ICurrency as Currency } from '@qiwi/substrate-types/target/es5/ICurrency';
    export {} from '@qiwi/substrate-types/target/es5/IPromise';
    export { IStorage as Storage } from '@qiwi/substrate-types/target/es5/IStorage';
    export { IMoney as Money } from '@qiwi/substrate-types/target/es5/IMoney';
    export {} from '@qiwi/substrate-types/target/es5/IStack';
    export { ICollection as Collection } from '@qiwi/substrate-types/target/es5/ICollection';
    export { TPredicate as Predicate } from '@qiwi/substrate-types/target/es5/TPredicate';
    export { IConfigurable as Configurable } from '@qiwi/substrate-types/target/es5/IConfigurable';
    export { IConfig as Config } from '@qiwi/substrate-types/target/es5/IConfig';
    export { IConstructor as Constructor, IConstructable as Constructable, Abstract, IClass as Class } from '@qiwi/substrate-types/target/es5/IConstructor';
    export { IIterable as Iterable, IIterator as Iterator, IIteratorResult as IteratorResult } from '@qiwi/substrate-types/target/es5/IIterable';
    export { IMiddleware as Middleware, IAsyncMiddleware as AsyncMiddleware, IErrorMiddleware as ErrorMiddleware, IRequestMiddleware as RequestMiddleware, IRequest as Request, IResponse as Response, INext as Next, } from '@qiwi/substrate-types/target/es5/IMiddleware';
    export { IPool as Pool, IPooledObject as PooledObject, IPooledObjectFactory as PooledObjectFactory, IPooledObjectStatus as PooledObjectStatus, } from '@qiwi/substrate-types/target/es5/IPool';
    export { IHttpClient as HttpClient, IFetch as Fetch, IHttpRequestProvider as HttpRequestProvider, HttpMethod, IHttpResponse as HttpResponse, IHttpRequest as HttpRequest, } from '@qiwi/substrate-types/target/es5/IHttpClient';
    export { IClientEventDto as ClientEventDto, IClientEventMeta as ClientEventMeta, EnvironmentProfile, } from '@qiwi/substrate-types/target/es5/IClientEventDto';
    export { INormalValue as NormalValue, IIdentified as Identified, IMetaTyped as MetaTyped, IMetaTypedValue as MetaTypedValue, IWrappedValue as WrappedValue, ITyped as Typed, ITypedValue as TypedValue, IMeted as Meted, IMetedValue as MetedValue, } from '@qiwi/substrate-types/target/es5/INormalValue';
    export { IFn as Fn, IUnaryFunction as UnaryFunction, IUnaryFn as UnaryFn, ICallable as Callable, } from '@qiwi/substrate-types/target/es5/IFunction';
    export { IMetadataProvider as MetadataProvider } from '@qiwi/substrate-types/target/es5/IMetadata';
    export { IEnableable as Enableable } from '@qiwi/substrate-types/target/es5/IEnableable';
    export { IPipe as Pipe, IPipeline as Pipeline, INormalPipe as NormalPipe, INormalPipeline as NormalPipeline } from '@qiwi/substrate-types/target/es5/IPipeline';
    export { IExtra as Extra } from '@qiwi/substrate-types/target/es5/IExtra';
    export { INil as Nil, INullOrUndefined as NullOrUndefined, INullable as Nullable, INilable as Nilable } from '@qiwi/substrate-types/target/es5/INil';
    export { IExecutionMode as ExecutionMode } from '@qiwi/substrate-types/target/es5/IExecutionMode';
    export { IDeviceInfo as DeviceInfo, IDeviceInfoStrict as DeviceInfoStrict } from '@qiwi/substrate-types/target/es5/IDeviceInfo';
}

declare module '@qiwi/substrate-types/target/es5/helpers' {
    export type UnionToIntersection<U, K = any> = (U extends K ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
    export function mkenum<T extends {
        [index: string]: U;
    }, U extends string>(x: T): T;
    export type EnumType<T> = T[keyof T];
    export type PrependTuple<A, T extends Array<any>> = ((a: A, ...b: T) => void) extends (...a: infer I) => void ? I : [];
    export type Extends<T, E, R1, R2> = T extends E ? R1 : R2;
    export type ExtendsOrNever<T, E> = Extends<T, E, T, never>;
    export type RecursivePartial<T> = {
        [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object ? RecursivePartial<T[P]> : T[P];
    };
    export type Prev<T extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62][T];
    export type GetLength<original extends any[]> = original extends {
        length: infer L;
    } ? L : never;
}

declare module '@qiwi/substrate-types/target/es5/extras' {
    import { IExtra } from '@qiwi/substrate-types/target/es5/IExtra';
    import { IStorage } from '@qiwi/substrate-types/target/es5/IStorage';
    export type IStoreExtra = IExtra<'store', IStorage>;
    export type IStorageExtra = IExtra<'storage', IStorage>;
}

declare module '@qiwi/substrate-types/target/es5/IStringMap' {
    export type IStringMap = {
        [key: string]: string;
    };
}

declare module '@qiwi/substrate-types/target/es5/IAnyMap' {
    export type IAnyMap = {
        [key: string]: any;
        [key: number]: any;
    };
}

declare module '@qiwi/substrate-types/target/es5/IEventEmitter' {
    export type IEventListener = (...args: any[]) => void;
    export type IEmitterMethod = (type: string, listener: IEventListener) => void;
    export interface IEventEmitter {
        emit(type: string, ...args: any[]): void;
        off: IEmitterMethod;
        on: IEmitterMethod;
        once: IEmitterMethod;
    }
}

declare module '@qiwi/substrate-types/target/es5/ILogger' {
    export type ILoggerMethod = (...args: any[]) => void;
    export enum LogLevel {
        ERROR = "error",
        WARN = "warn",
        INFO = "info",
        DEBUG = "debug",
        TRACE = "trace",
        error = "error",
        warn = "warn",
        info = "info",
        debug = "debug",
        trace = "trace"
    }
    export interface ILogger {
        trace: ILoggerMethod;
        debug: ILoggerMethod;
        info: ILoggerMethod;
        log: ILoggerMethod;
        warn: ILoggerMethod;
        error: ILoggerMethod;
        fatal?: ILoggerMethod;
        [key: string]: any;
        [key: number]: any;
    }
}

declare module '@qiwi/substrate-types/target/es5/IUtilGet' {
    export type TUtilGetPath = Array<string | number> | string;
    export type TUtilGetObject = object;
    export type TUtilGetDefaultValue = any;
    export type TUtilGetResponse = any;
    export type TUtilGet = (obj: TUtilGetObject, path: TUtilGetPath, defaultValue?: TUtilGetDefaultValue) => TUtilGetResponse;
}

declare module '@qiwi/substrate-types/target/es5/IUtilSet' {
    export type TUtilSetPath = Array<string | number> | string;
    export type TUtilSetObject = object;
    export type TUtilSetValue = any;
    export type TUtilSet = (obj: TUtilSetObject, path: TUtilSetPath, value: TUtilSetValue) => void;
}

declare module '@qiwi/substrate-types/target/es5/IUtilEach' {
    export type TUtilEachCollection = any[] | object;
    export type TUtilEachHandler = (value: any, key?: string | number, collection?: TUtilEachCollection) => void;
    export type TUtilEach = (collection: TUtilEachCollection, handler: TUtilEachHandler) => TUtilEachCollection;
}

declare module '@qiwi/substrate-types/target/es5/IUtilMap' {
    export type TUtilMapCollection = any[] | object;
    export type TUtilMapHandler = (value: any, key?: string | number, collection?: TUtilMapCollection) => any;
    export type TUtilMap = (collection: TUtilMapCollection, handler: TUtilMapHandler) => any[];
}

declare module '@qiwi/substrate-types/target/es5/ICloneable' {
    export interface ICloneable<T> {
        clone(): T;
    }
}

declare module '@qiwi/substrate-types/target/es5/ICurrency' {
    export type ICurrency = string;
}

declare module '@qiwi/substrate-types/target/es5/IPromise' {
    import { IConstructor } from '@qiwi/substrate-types/target/es5/IConstructor';
    export type TPromiseExecutor<TValue = any, TReason = any> = (resolve: (value: TValue) => void, reject: (reason: TReason) => void) => void;
    export interface IPromise<TValue = any, TReason = any> {
        then: (onSuccess?: (value: TValue) => any, onReject?: (reason: TReason) => any) => IPromise;
        catch: (onReject: (reason: TReason) => any) => IPromise;
        finally: (onFinally: () => any) => IPromise;
        readonly [Symbol.toStringTag]: string;
    }
    export interface IPromiseConstructor<TValue = any, TReason = any> extends IConstructor<IPromise<TValue, TReason>> {
        new (executor: TPromiseExecutor<TValue>): IPromise<TValue, TReason>;
        all: (values: Iterable<IPromise<TValue, TReason>>) => IPromise<TValue[], TReason>;
        race: (values: Iterable<IPromise<TValue, TReason>>) => IPromise<TValue, TReason>;
        reject: (reason?: TReason) => IPromise<TValue, TReason>;
        resolve: (value?: TValue) => IPromise<TValue, TReason>;
    }
    export const IPromise: PromiseConstructor;
}

declare module '@qiwi/substrate-types/target/es5/IStorage' {
    export type TStorageKey = string;
    export type TStorageValue = any;
    export type TStorageTTL = number;
    export interface IStorage {
        get: (key: TStorageKey) => TStorageValue;
        set: (key: TStorageKey, value: TStorageValue, ttl?: TStorageTTL) => void;
        has: (key: TStorageKey) => boolean;
        remove: (key: TStorageKey) => void;
        size: () => number;
        reset: () => void;
    }
}

declare module '@qiwi/substrate-types/target/es5/IMoney' {
    import { ICurrency } from '@qiwi/substrate-types/target/es5/ICurrency';
    export type IValue = number;
    export interface IMoney {
        value: IValue;
        currency: ICurrency;
        toString: () => string;
    }
}

declare module '@qiwi/substrate-types/target/es5/IStack' {
    import { ICollection } from '@qiwi/substrate-types/target/es5/ICollection';
    export type IStackItem = any;
    export interface IStack<T> extends ICollection<T> {
        push: (...items: Array<T>) => T;
        pop: () => T | undefined;
        unshift: (...items: Array<T>) => T;
        shift: () => T | undefined;
        indexOf: (item: T) => number;
        first: () => T | undefined;
        last: () => T | undefined;
        toArray(): Array<T>;
    }
}

declare module '@qiwi/substrate-types/target/es5/ICollection' {
    export type ICollectionItem = any;
    export interface ICollection<T> {
        get: (index: number | string) => T | undefined;
        add: (index: number | string, item: T) => T;
        remove: (index: number | string) => T | undefined;
        clear: () => void;
        size: number;
        isEmpty: () => boolean;
    }
}

declare module '@qiwi/substrate-types/target/es5/TPredicate' {
    export type TPredicate = (...args: any[]) => boolean;
}

declare module '@qiwi/substrate-types/target/es5/IConfigurable' {
    export interface IConfigurable {
        setConfig: (options?: any) => void;
        getConfig: () => any;
    }
}

declare module '@qiwi/substrate-types/target/es5/IConfig' {
    export type TConfigKey = string;
    export interface IConfig<T = any> {
        set?: (key: TConfigKey, value: T) => void;
        get: (key: TConfigKey) => T;
        has: (key: TConfigKey) => boolean;
        delete?: (key: TConfigKey) => void;
        clear?: () => void;
        size?: number;
        [key: string]: any;
    }
}

declare module '@qiwi/substrate-types/target/es5/IConstructor' {
    export type Abstract<T = object> = Function & {
        prototype: T;
    };
    export type IConstructor<T = object, A extends any[] = any[]> = new (...args: A) => T;
    export type IClass<T = object> = Abstract<T> & IConstructor<T>;
    export type IConstructable<T = object, A extends any[] = any[]> = IConstructor<T, A>;
}

declare module '@qiwi/substrate-types/target/es5/IIterable' {
    export interface IIteratorResult {
        value: any;
        done: boolean;
    }
    export interface IIterator {
        next(): {
            value: any;
            done: boolean;
        };
    }
    export interface IIterable {
        [Symbol.iterator](): IIterator;
    }
}

declare module '@qiwi/substrate-types/target/es5/IMiddleware' {
    export interface IRequest {
        res?: IResponse;
        [key: string]: any;
    }
    export interface IResponse {
        status: (status: number) => IResponse;
        send: (arg: string | object) => IResponse;
        json: () => IResponse;
        req?: IRequest;
        [key: string]: any;
    }
    export interface INext {
        (...args: any[]): any;
    }
    export interface IRequestMiddleware {
        (req: IRequest, res: IResponse, next?: INext): void;
    }
    export interface IErrorMiddleware {
        (err: Error, req: IRequest, res: IResponse, next?: INext): void;
    }
    export type IMiddleware = IRequestMiddleware | IErrorMiddleware;
    export interface IAsyncRequestMiddleware {
        (req: IRequest, res: IResponse, next?: INext): Promise<void>;
    }
    export interface IAsyncErrorMiddleware {
        (err: Error, req: IRequest, res: IResponse, next?: INext): Promise<void>;
    }
    export type IAsyncMiddleware = IAsyncRequestMiddleware | IAsyncErrorMiddleware;
}

declare module '@qiwi/substrate-types/target/es5/IPool' {
    import { IPromise } from '@qiwi/substrate-types/target/es5/IPromise';
    export const enum IPooledObjectStatus {
        READY = "ready",
        ACTIVE = "active",
        INVALID = "invalid"
    }
    export interface IPooledObject<T> {
        ref: T;
        status: IPooledObjectStatus;
        activate(): void;
        passivate(): void;
        destroy(): void;
        validate(): boolean;
        [key: string]: any;
    }
    export interface IPooledObjectFactory<T> {
        (...args: any[]): IPooledObject<T>;
    }
    export interface IPool<T> {
        factory: IPooledObjectFactory<T>;
        borrow(): IPromise<T>;
        release(instance: T): void;
        invalidate(instance: T): void;
        [key: string]: any;
    }
}

declare module '@qiwi/substrate-types/target/es5/IHttpClient' {
    import { IPromise } from '@qiwi/substrate-types/target/es5/IPromise';
    export const enum HttpMethod {
        GET = "GET",
        DELETE = "DELETE",
        HEAD = "HEAD",
        OPTIONS = "OPTIONS",
        POST = "POST",
        PUT = "PUT",
        PATCH = "PATCH"
    }
    export type IHttpHeaders = Record<string, any>;
    export interface IHttpResponse<D = any> {
        status: number;
        statusText: string;
        headers: IHttpHeaders;
        data: D;
    }
    export interface IFetchResponse<D = any> {
        status: number;
        statusText: string;
        headers: any;
        json(): IPromise<D>;
        body: any;
    }
    export interface IHttpRequest {
        url?: string;
        method?: HttpMethod;
        headers?: IHttpHeaders;
        params?: any;
        body?: any;
        data?: any;
    }
    export interface IFetch<Req extends IHttpRequest = IHttpRequest, Res extends IFetchResponse = IFetchResponse> {
        <D = any>(url: string, req?: Req): IPromise<Omit<Res, 'json'> & IFetchResponse<D>>;
    }
    export interface IHttpReqPerform<Req = IHttpRequest, Res = IHttpResponse> {
        <D = any>(url: string, body?: any, req?: Req): IPromise<Omit<Res, 'data'> & IHttpResponse<D>>;
        <D = any>(url: string, req?: Req): IPromise<Omit<Res, 'data'> & IHttpResponse<D>>;
    }
    export interface IHttpClient<Req extends IHttpRequest = IHttpRequest, Res extends IHttpResponse = IHttpResponse> {
        <D = any>(req: Req): IPromise<Omit<Res, 'data'> & IHttpResponse<D>>;
        <D = any>(url: string, req?: Req): IPromise<Omit<Res, 'data'> & IHttpResponse<D>>;
        get: IHttpReqPerform<Req, Res>;
        post: IHttpReqPerform<Req, Res>;
        put: IHttpReqPerform<Req, Res>;
        patch: IHttpReqPerform<Req, Res>;
        head: IHttpReqPerform<Req, Res>;
        delete: IHttpReqPerform<Req, Res>;
        options: IHttpReqPerform<Req, Res>;
    }
    export type IHttpRequestProvider = IFetch | IHttpClient;
}

declare module '@qiwi/substrate-types/target/es5/IClientEventDto' {
    import { RecursivePartial } from '@qiwi/substrate-types/target/es5/helpers';
    import { IDeviceInfo } from '@qiwi/substrate-types/target/es5/IDeviceInfo';
    import { LogLevel } from '@qiwi/substrate-types/target/es5/ILogger';
    export enum EnvironmentProfile {
        CI = "ci",
        DEV = "development",
        TEST = "testing",
        PROD = "prod",
        STAGE = "staging"
    }
    type TClientEventMeta = RecursivePartial<{
        appName: string;
        appHost: string;
        appVersion: string;
        appNamespace: string;
        appConfig: Record<string, any>;
        envProfile: EnvironmentProfile;
        deviceInfo: IDeviceInfo;
        userAgent: string;
    }>;
    export type IClientEventMeta = TClientEventMeta;
    export interface IClientEventDto {
        message: string;
        tags?: Array<string>;
        code?: string;
        level?: LogLevel;
        meta?: IClientEventMeta;
        details?: Record<string, any>;
        stacktrace?: any;
        timestamp?: number | string;
        ttl?: number;
    }
    export {};
}

declare module '@qiwi/substrate-types/target/es5/INormalValue' {
    import { UnionToIntersection } from '@qiwi/substrate-types/target/es5/helpers';
    import { IAnyMap } from '@qiwi/substrate-types/target/es5/IAnyMap';
    export interface IIdentified {
        id: string | number | symbol;
    }
    export type IWrappedValue<V = any, W = Object> = (W extends object[] ? UnionToIntersection<W[number]> : W extends object ? W : object) & {
        value: V;
    };
    export type ITyped<T = any> = {
        type: T;
    };
    export type ITypedValue<V = any, T = any> = IWrappedValue<V, ITyped<T>>;
    export type IMeted<M extends IAnyMap = IAnyMap> = {
        meta: M;
    };
    export type IMetedValue<V = any, M extends IAnyMap = IAnyMap> = IWrappedValue<V, IMeted<M>>;
    export type IMetaTyped<T = any, M extends IAnyMap = IAnyMap> = ITyped<T> & IMeted<M>;
    export type IMetaTypedValue<V = any, T = any, M extends IAnyMap = IAnyMap> = IWrappedValue<V, IMetaTyped<T, M>>;
    export type INormalValue<V = any, T = any, M extends IAnyMap = IAnyMap> = IWrappedValue<V, [IMetaTyped<T, M>, IIdentified]>;
}

declare module '@qiwi/substrate-types/target/es5/IFunction' {
    export type IFunction<A extends any[] = any[], R = any> = (...args: A) => R;
    export type IFn<A extends any[] = any[], R = any> = IFunction<A, R>;
    export type ICallable<A extends any[] = any[], R = any> = IFunction<A, R>;
    export type IUnaryFunction<A = any, R = any> = (a: A) => R;
    export type IUnaryFn<A = any, R = any> = IUnaryFunction<A, R>;
}

declare module '@qiwi/substrate-types/target/es5/IMetadata' {
    export interface IMetadataProvider {
        defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey?: string | symbol): void;
        hasMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean;
        getMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any;
        getOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any;
    }
}

declare module '@qiwi/substrate-types/target/es5/IEnableable' {
    export interface IEnableable {
        enable(): void;
        disable(): void;
    }
}

declare module '@qiwi/substrate-types/target/es5/IPipeline' {
    import { IUnaryFn } from '@qiwi/substrate-types/target/es5/IFunction';
    import { INormalValue } from '@qiwi/substrate-types/target/es5/INormalValue';
    export type IPipe<E = any> = IUnaryFn<E, E>;
    export type IPipeline<P extends IPipe = IPipe> = Array<P>;
    export type INormalPipe<E extends INormalValue = INormalValue> = IPipe<E>;
    export type INormalPipeline<P extends INormalPipe = INormalPipe> = IPipeline<P>;
}

declare module '@qiwi/substrate-types/target/es5/IExtra' {
    export type IExtra<K extends string, V> = {
        [key in K]: V;
    };
}

declare module '@qiwi/substrate-types/target/es5/INil' {
    export type INil = null | undefined;
    export type INullOrUndefined = INil;
    export type INullable<T = any> = T | null;
    export type INilable<T = any> = T | INil;
}

declare module '@qiwi/substrate-types/target/es5/IExecutionMode' {
    export enum IExecutionMode {
        SYNC = "sync",
        ASYNC = "async"
    }
}

declare module '@qiwi/substrate-types/target/es5/IDeviceInfo' {
    import { RecursivePartial } from '@qiwi/substrate-types/target/es5/helpers';
    export type IBrowserInfo = RecursivePartial<{
        name: string | null;
        version: string | null;
        layout: string | null;
    }>;
    export type IOperationalSystemInfo = RecursivePartial<{
        name: string | null;
        architecture: number | null;
        family: string | null;
        version: string | null;
    }>;
    export type IDeviceInfoStrict = RecursivePartial<{
        browser: IBrowserInfo;
        model: {
            name: string | null;
            manufacturer: string | null;
        };
        isMobile: boolean;
        os: IOperationalSystemInfo;
    }>;
    export type IDeviceInfo = IDeviceInfoStrict | Record<string, any>;
}

