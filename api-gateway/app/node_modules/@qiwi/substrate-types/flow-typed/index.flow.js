/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.19.0
 */

// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

declare module "@qiwi/substrate-types" {
  declare export * from "@qiwi/substrate-types/target/es6";
}

declare module "@qiwi/substrate-types/target/es5" {
  declare export * from "@qiwi/substrate-types/target/es5/export";

  declare export * from "@qiwi/substrate-types/target/es5/aliases";

  declare export * from "@qiwi/substrate-types/target/es5/helpers";

  declare export * from "@qiwi/substrate-types/target/es5/extras";
}

declare module "@qiwi/substrate-types/target/es5/export" {
  declare export { IStringMap } from "@qiwi/substrate-types/target/es5/IStringMap";

  declare export { IAnyMap } from "@qiwi/substrate-types/target/es5/IAnyMap";

  declare export { IEventEmitter } from "@qiwi/substrate-types/target/es5/IEventEmitter";

  declare export {
    ILogger,
    LogLevel,
    ILoggerMethod,
  } from "@qiwi/substrate-types/target/es5/ILogger";

  declare export { TUtilGet } from "@qiwi/substrate-types/target/es5/IUtilGet";

  declare export { TUtilSet } from "@qiwi/substrate-types/target/es5/IUtilSet";

  declare export { TUtilEach } from "@qiwi/substrate-types/target/es5/IUtilEach";

  declare export { TUtilMap } from "@qiwi/substrate-types/target/es5/IUtilMap";

  declare export { ICloneable } from "@qiwi/substrate-types/target/es5/ICloneable";

  declare export { ICurrency } from "@qiwi/substrate-types/target/es5/ICurrency";

  declare export {
    IPromiseConstructor,
    IPromise,
  } from "@qiwi/substrate-types/target/es5/IPromise";

  declare export { IStorage } from "@qiwi/substrate-types/target/es5/IStorage";

  declare export { IMoney } from "@qiwi/substrate-types/target/es5/IMoney";

  declare export { IStack } from "@qiwi/substrate-types/target/es5/IStack";

  declare export { ICollection } from "@qiwi/substrate-types/target/es5/ICollection";

  declare export { TPredicate } from "@qiwi/substrate-types/target/es5/TPredicate";

  declare export { IConfigurable } from "@qiwi/substrate-types/target/es5/IConfigurable";

  declare export { IConfig } from "@qiwi/substrate-types/target/es5/IConfig";

  declare export {
    IConstructor,
    IConstructable,
    Abstract,
    IClass,
  } from "@qiwi/substrate-types/target/es5/IConstructor";

  declare export {
    IIterable,
    IIterator,
    IIteratorResult,
  } from "@qiwi/substrate-types/target/es5/IIterable";

  declare export {
    IMiddleware,
    IAsyncMiddleware,
    IErrorMiddleware,
    IRequestMiddleware,
    IRequest,
    IResponse,
    INext,
  } from "@qiwi/substrate-types/target/es5/IMiddleware";

  declare export {
    IPool,
    IPooledObject,
    IPooledObjectFactory,
    IPooledObjectStatus,
  } from "@qiwi/substrate-types/target/es5/IPool";

  declare export {
    IHttpClient,
    IFetch,
    IHttpRequestProvider,
    HttpMethod,
    IHttpResponse,
    IHttpRequest,
  } from "@qiwi/substrate-types/target/es5/IHttpClient";

  declare export {
    IClientEventDto,
    IClientEventMeta,
    EnvironmentProfile,
  } from "@qiwi/substrate-types/target/es5/IClientEventDto";

  declare export {
    INormalValue,
    IIdentified,
    IMetaTyped,
    IMetaTypedValue,
    IWrappedValue,
    ITyped,
    ITypedValue,
    IMeted,
    IMetedValue,
  } from "@qiwi/substrate-types/target/es5/INormalValue";

  declare export {
    IFunction,
    IFn,
    IUnaryFunction,
    IUnaryFn,
    ICallable,
  } from "@qiwi/substrate-types/target/es5/IFunction";

  declare export { IMetadataProvider } from "@qiwi/substrate-types/target/es5/IMetadata";

  declare export { IEnableable } from "@qiwi/substrate-types/target/es5/IEnableable";

  declare export {
    IPipe,
    IPipeline,
    INormalPipe,
    INormalPipeline,
  } from "@qiwi/substrate-types/target/es5/IPipeline";

  declare export { IExtra } from "@qiwi/substrate-types/target/es5/IExtra";

  declare export {
    INil,
    INullOrUndefined,
    INullable,
    INilable,
  } from "@qiwi/substrate-types/target/es5/INil";

  declare export { IExecutionMode } from "@qiwi/substrate-types/target/es5/IExecutionMode";

  declare export {
    IDeviceInfo,
    IDeviceInfoStrict,
  } from "@qiwi/substrate-types/target/es5/IDeviceInfo";
}

declare module "@qiwi/substrate-types/target/es5/aliases" {
  declare export { IStringMap as StringMap } from "@qiwi/substrate-types/target/es5/IStringMap";

  declare export { IAnyMap as AnyMap } from "@qiwi/substrate-types/target/es5/IAnyMap";

  declare export { IEventEmitter as EventEmitter } from "@qiwi/substrate-types/target/es5/IEventEmitter";

  declare export {
    ILogger as Logger,
    LogLevel,
    ILoggerMethod as LoggerMethod,
  } from "@qiwi/substrate-types/target/es5/ILogger";

  declare export { TUtilGet as UtilGet } from "@qiwi/substrate-types/target/es5/IUtilGet";

  declare export { TUtilSet as UtilSet } from "@qiwi/substrate-types/target/es5/IUtilSet";

  declare export { TUtilEach as UtilEach } from "@qiwi/substrate-types/target/es5/IUtilEach";

  declare export { TUtilMap as UtilMap } from "@qiwi/substrate-types/target/es5/IUtilMap";

  declare export { ICloneable as Cloneable } from "@qiwi/substrate-types/target/es5/ICloneable";

  declare export { ICurrency as Currency } from "@qiwi/substrate-types/target/es5/ICurrency";

  declare export { IStorage as Storage } from "@qiwi/substrate-types/target/es5/IStorage";

  declare export { IMoney as Money } from "@qiwi/substrate-types/target/es5/IMoney";

  declare export { ICollection as Collection } from "@qiwi/substrate-types/target/es5/ICollection";

  declare export { TPredicate as Predicate } from "@qiwi/substrate-types/target/es5/TPredicate";

  declare export { IConfigurable as Configurable } from "@qiwi/substrate-types/target/es5/IConfigurable";

  declare export { IConfig as Config } from "@qiwi/substrate-types/target/es5/IConfig";

  declare export {
    IConstructor as Constructor,
    IConstructable as Constructable,
    Abstract,
    IClass as Class,
  } from "@qiwi/substrate-types/target/es5/IConstructor";

  declare export {
    IIterable as Iterable,
    IIterator as Iterator,
    IIteratorResult as IteratorResult,
  } from "@qiwi/substrate-types/target/es5/IIterable";

  declare export {
    IMiddleware as Middleware,
    IAsyncMiddleware as AsyncMiddleware,
    IErrorMiddleware as ErrorMiddleware,
    IRequestMiddleware as RequestMiddleware,
    IRequest as Request,
    IResponse as Response,
    INext as Next,
  } from "@qiwi/substrate-types/target/es5/IMiddleware";

  declare export {
    IPool as Pool,
    IPooledObject as PooledObject,
    IPooledObjectFactory as PooledObjectFactory,
    IPooledObjectStatus as PooledObjectStatus,
  } from "@qiwi/substrate-types/target/es5/IPool";

  declare export {
    IHttpClient as HttpClient,
    IFetch as Fetch,
    IHttpRequestProvider as HttpRequestProvider,
    HttpMethod,
    IHttpResponse as HttpResponse,
    IHttpRequest as HttpRequest,
  } from "@qiwi/substrate-types/target/es5/IHttpClient";

  declare export {
    IClientEventDto as ClientEventDto,
    IClientEventMeta as ClientEventMeta,
    EnvironmentProfile,
  } from "@qiwi/substrate-types/target/es5/IClientEventDto";

  declare export {
    INormalValue as NormalValue,
    IIdentified as Identified,
    IMetaTyped as MetaTyped,
    IMetaTypedValue as MetaTypedValue,
    IWrappedValue as WrappedValue,
    ITyped as Typed,
    ITypedValue as TypedValue,
    IMeted as Meted,
    IMetedValue as MetedValue,
  } from "@qiwi/substrate-types/target/es5/INormalValue";

  declare export {
    IFn as Fn,
    IUnaryFunction as UnaryFunction,
    IUnaryFn as UnaryFn,
    ICallable as Callable,
  } from "@qiwi/substrate-types/target/es5/IFunction";

  declare export { IMetadataProvider as MetadataProvider } from "@qiwi/substrate-types/target/es5/IMetadata";

  declare export { IEnableable as Enableable } from "@qiwi/substrate-types/target/es5/IEnableable";

  declare export {
    IPipe as Pipe,
    IPipeline as Pipeline,
    INormalPipe as NormalPipe,
    INormalPipeline as NormalPipeline,
  } from "@qiwi/substrate-types/target/es5/IPipeline";

  declare export { IExtra as Extra } from "@qiwi/substrate-types/target/es5/IExtra";

  declare export {
    INil as Nil,
    INullOrUndefined as NullOrUndefined,
    INullable as Nullable,
    INilable as Nilable,
  } from "@qiwi/substrate-types/target/es5/INil";

  declare export { IExecutionMode as ExecutionMode } from "@qiwi/substrate-types/target/es5/IExecutionMode";

  declare export {
    IDeviceInfo as DeviceInfo,
    IDeviceInfoStrict as DeviceInfoStrict,
  } from "@qiwi/substrate-types/target/es5/IDeviceInfo";
}

declare module "@qiwi/substrate-types/target/es5/helpers" {
  declare export type UnionToIntersection<U, K = any> = $FlowGen$If<
    $FlowGen$Assignable<
      $FlowGen$If<$FlowGen$Assignable<U, K>, (k: U) => void, empty>,
      (k: I) => void
    >,
    I,
    empty
  >;
  declare export function mkenum<
    T: {
      [index: string]: U,
      ...
    },
    U: string
  >(
    x: T
  ): T;

  declare export type EnumType<T> = $ElementType<T, $Keys<T>>;
  declare export type PrependTuple<A, T: Array<any>> = $FlowGen$If<
    $FlowGen$Assignable<(a: A, ...b: T) => void, (...a: I) => void>,
    I,
    []
  >;
  declare export type Extends<T, E, R1, R2> = $FlowGen$If<
    $FlowGen$Assignable<T, E>,
    R1,
    R2
  >;
  declare export type ExtendsOrNever<T, E> = Extends<T, E, T, empty>;
  declare export type RecursivePartial<T> = $ObjMapi<
    T,
    <P>(
      P
    ) => $FlowGen$If<
      $FlowGen$Assignable<$ElementType<T, P>, U[]>,
      RecursivePartial<U>[],
      $FlowGen$If<
        $FlowGen$Assignable<$ElementType<T, P>, { [key: string]: any }>,
        RecursivePartial<$ElementType<T, P>>,
        $ElementType<T, P>
      >
    >
  >;
  declare export type Prev<T: number> = $ElementType<
    [
      -1,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62
    ],
    T
  >;
  declare export type GetLength<original: any[]> = $FlowGen$If<
    $FlowGen$Assignable<
      original,
      {
        length: L,
        ...
      }
    >,
    L,
    empty
  >;
}

declare module "@qiwi/substrate-types/target/es5/extras" {
  import type { IExtra } from "@qiwi/substrate-types/target/es5/IExtra";

  import type { IStorage } from "@qiwi/substrate-types/target/es5/IStorage";

  declare export type IStoreExtra = IExtra<"store", IStorage>;
  declare export type IStorageExtra = IExtra<"storage", IStorage>;
}

declare module "@qiwi/substrate-types/target/es5/IStringMap" {
  declare export type IStringMap = {
    [key: string]: string,
    ...
  };
}

declare module "@qiwi/substrate-types/target/es5/IAnyMap" {
  declare export type IAnyMap = {
    [key: string]: any,
    [key: number]: any,
    ...
  };
}

declare module "@qiwi/substrate-types/target/es5/IEventEmitter" {
  declare export type IEventListener = (...args: any[]) => void;
  declare export type IEmitterMethod = (
    type: string,
    listener: IEventListener
  ) => void;
  declare export interface IEventEmitter {
    emit(type: string, ...args: any[]): void;
    off: IEmitterMethod;
    on: IEmitterMethod;
    once: IEmitterMethod;
  }
}

declare module "@qiwi/substrate-types/target/es5/ILogger" {
  declare export type ILoggerMethod = (...args: any[]) => void;

  declare export var LogLevel: {|
    +ERROR: "error", // "error"
    +WARN: "warn", // "warn"
    +INFO: "info", // "info"
    +DEBUG: "debug", // "debug"
    +TRACE: "trace", // "trace"
    +error: "error", // "error"
    +warn: "warn", // "warn"
    +info: "info", // "info"
    +debug: "debug", // "debug"
    +trace: "trace", // "trace"
  |};

  declare export interface ILogger {
    trace: ILoggerMethod;
    debug: ILoggerMethod;
    info: ILoggerMethod;
    log: ILoggerMethod;
    warn: ILoggerMethod;
    error: ILoggerMethod;
    fatal?: ILoggerMethod;
    [key: string]: any;
    [key: number]: any;
  }
}

declare module "@qiwi/substrate-types/target/es5/IUtilGet" {
  declare export type TUtilGetPath = Array<string | number> | string;
  declare export type TUtilGetObject = { [key: string]: any };
  declare export type TUtilGetDefaultValue = any;
  declare export type TUtilGetResponse = any;
  declare export type TUtilGet = (
    obj: TUtilGetObject,
    path: TUtilGetPath,
    defaultValue?: TUtilGetDefaultValue
  ) => TUtilGetResponse;
}

declare module "@qiwi/substrate-types/target/es5/IUtilSet" {
  declare export type TUtilSetPath = Array<string | number> | string;
  declare export type TUtilSetObject = { [key: string]: any };
  declare export type TUtilSetValue = any;
  declare export type TUtilSet = (
    obj: TUtilSetObject,
    path: TUtilSetPath,
    value: TUtilSetValue
  ) => void;
}

declare module "@qiwi/substrate-types/target/es5/IUtilEach" {
  declare export type TUtilEachCollection = any[] | { [key: string]: any };
  declare export type TUtilEachHandler = (
    value: any,
    key?: string | number,
    collection?: TUtilEachCollection
  ) => void;
  declare export type TUtilEach = (
    collection: TUtilEachCollection,
    handler: TUtilEachHandler
  ) => TUtilEachCollection;
}

declare module "@qiwi/substrate-types/target/es5/IUtilMap" {
  declare export type TUtilMapCollection = any[] | { [key: string]: any };
  declare export type TUtilMapHandler = (
    value: any,
    key?: string | number,
    collection?: TUtilMapCollection
  ) => any;
  declare export type TUtilMap = (
    collection: TUtilMapCollection,
    handler: TUtilMapHandler
  ) => any[];
}

declare module "@qiwi/substrate-types/target/es5/ICloneable" {
  declare export interface ICloneable<T> {
    clone(): T;
  }
}

declare module "@qiwi/substrate-types/target/es5/ICurrency" {
  declare export type ICurrency = string;
}

declare module "@qiwi/substrate-types/target/es5/IPromise" {
  import type { IConstructor } from "@qiwi/substrate-types/target/es5/IConstructor";

  declare export type TPromiseExecutor<TValue = any, TReason = any> = (
    resolve: (value: TValue) => void,
    reject: (reason: TReason) => void
  ) => void;
  declare export interface IPromise<TValue = any, TReason = any> {
    then: (
      onSuccess?: (value: TValue) => any,
      onReject?: (reason: TReason) => any
    ) => IPromise<>;
    catch: (onReject: (reason: TReason) => any) => IPromise<>;
    finally: (onFinally: () => any) => IPromise<>;
    +[typeof Symbol.toStringTag]: string;
  }
  declare export type IPromiseConstructor<TValue = any, TReason = any> = {
    new(executor: TPromiseExecutor<TValue>): IPromise<TValue, TReason>,
    all: (
      values: Iterable<IPromise<TValue, TReason>>
    ) => IPromise<TValue[], TReason>,
    race: (
      values: Iterable<IPromise<TValue, TReason>>
    ) => IPromise<TValue, TReason>,
    reject: (reason?: TReason) => IPromise<TValue, TReason>,
    resolve: (value?: TValue) => IPromise<TValue, TReason>,
    ...
  } & IConstructor<IPromise<TValue, TReason>>;

  declare export var IPromise: PromiseConstructor;
}

declare module "@qiwi/substrate-types/target/es5/IStorage" {
  declare export type TStorageKey = string;
  declare export type TStorageValue = any;
  declare export type TStorageTTL = number;
  declare export interface IStorage {
    get: (key: TStorageKey) => TStorageValue;
    set: (key: TStorageKey, value: TStorageValue, ttl?: TStorageTTL) => void;
    has: (key: TStorageKey) => boolean;
    remove: (key: TStorageKey) => void;
    size: () => number;
    reset: () => void;
  }
}

declare module "@qiwi/substrate-types/target/es5/IMoney" {
  import type { ICurrency } from "@qiwi/substrate-types/target/es5/ICurrency";

  declare export type IValue = number;
  declare export interface IMoney {
    value: IValue;
    currency: ICurrency;
    toString: () => string;
  }
}

declare module "@qiwi/substrate-types/target/es5/IStack" {
  import type { ICollection } from "@qiwi/substrate-types/target/es5/ICollection";

  declare export type IStackItem = any;
  declare export type IStack<T> = {
    push: (...items: Array<T>) => T,
    pop: () => T | void,
    unshift: (...items: Array<T>) => T,
    shift: () => T | void,
    indexOf: (item: T) => number,
    first: () => T | void,
    last: () => T | void,
    toArray(): Array<T>,
    ...
  } & ICollection<T>;
}

declare module "@qiwi/substrate-types/target/es5/ICollection" {
  declare export type ICollectionItem = any;
  declare export interface ICollection<T> {
    get: (index: number | string) => T | void;
    add: (index: number | string, item: T) => T;
    remove: (index: number | string) => T | void;
    clear: () => void;
    size: number;
    isEmpty: () => boolean;
  }
}

declare module "@qiwi/substrate-types/target/es5/TPredicate" {
  declare export type TPredicate = (...args: any[]) => boolean;
}

declare module "@qiwi/substrate-types/target/es5/IConfigurable" {
  declare export interface IConfigurable {
    setConfig: (options?: any) => void;
    getConfig: () => any;
  }
}

declare module "@qiwi/substrate-types/target/es5/IConfig" {
  declare export type TConfigKey = string;
  declare export interface IConfig<T = any> {
    set?: (key: TConfigKey, value: T) => void;
    get: (key: TConfigKey) => T;
    has: (key: TConfigKey) => boolean;
    delete?: (key: TConfigKey) => void;
    clear?: () => void;
    size?: number;
    [key: string]: any;
  }
}

declare module "@qiwi/substrate-types/target/es5/IConstructor" {
  declare export type Abstract<T = { [key: string]: any }> = {
    ...Function,
    ...{
      prototype: T,
      ...
    },
  };
  declare export type IConstructor<
    T = { [key: string]: any },
    A: any[] = any[]
  > = (...args: A) => T;
  declare export type IClass<T = { [key: string]: any }> = {
    ...Abstract<T>,
    ...IConstructor<T>,
  };
  declare export type IConstructable<
    T = { [key: string]: any },
    A: any[] = any[]
  > = IConstructor<T, A>;
}

declare module "@qiwi/substrate-types/target/es5/IIterable" {
  declare export interface IIteratorResult {
    value: any;
    done: boolean;
  }
  declare export interface IIterator {
    next(): {
      value: any,
      done: boolean,
      ...
    };
  }
  declare export interface IIterable {
    @@iterator: () => IIterator;
  }
}

declare module "@qiwi/substrate-types/target/es5/IMiddleware" {
  declare export interface IRequest {
    res?: IResponse;
    [key: string]: any;
  }
  declare export interface IResponse {
    status: (status: number) => IResponse;
    send: (arg: string | { [key: string]: any }) => IResponse;
    json: () => IResponse;
    req?: IRequest;
    [key: string]: any;
  }
  declare export interface INext {
    (...args: any[]): any;
  }
  declare export interface IRequestMiddleware {
    (req: IRequest, res: IResponse, next?: INext): void;
  }
  declare export interface IErrorMiddleware {
    (err: Error, req: IRequest, res: IResponse, next?: INext): void;
  }
  declare export type IMiddleware = IRequestMiddleware | IErrorMiddleware;
  declare export interface IAsyncRequestMiddleware {
    (req: IRequest, res: IResponse, next?: INext): Promise<void>;
  }
  declare export interface IAsyncErrorMiddleware {
    (err: Error, req: IRequest, res: IResponse, next?: INext): Promise<void>;
  }
  declare export type IAsyncMiddleware =
    | IAsyncRequestMiddleware
    | IAsyncErrorMiddleware;
}

declare module "@qiwi/substrate-types/target/es5/IPool" {
  import type { IPromise } from "@qiwi/substrate-types/target/es5/IPromise";

  declare export var IPooledObjectStatus: {|
    +READY: "ready", // "ready"
    +ACTIVE: "active", // "active"
    +INVALID: "invalid", // "invalid"
  |};

  declare export interface IPooledObject<T> {
    ref: T;
    status: $Values<typeof IPooledObjectStatus>;
    activate(): void;
    passivate(): void;
    destroy(): void;
    validate(): boolean;
    [key: string]: any;
  }
  declare export interface IPooledObjectFactory<T> {
    (...args: any[]): IPooledObject<T>;
  }
  declare export interface IPool<T> {
    factory: IPooledObjectFactory<T>;
    borrow(): IPromise<T>;
    release(instance: T): void;
    invalidate(instance: T): void;
    [key: string]: any;
  }
}

declare module "@qiwi/substrate-types/target/es5/IHttpClient" {
  import type { IPromise } from "@qiwi/substrate-types/target/es5/IPromise";

  declare export var HttpMethod: {|
    +GET: "GET", // "GET"
    +DELETE: "DELETE", // "DELETE"
    +HEAD: "HEAD", // "HEAD"
    +OPTIONS: "OPTIONS", // "OPTIONS"
    +POST: "POST", // "POST"
    +PUT: "PUT", // "PUT"
    +PATCH: "PATCH", // "PATCH"
  |};

  declare export type IHttpHeaders = { [key: string]: any, ... };
  declare export interface IHttpResponse<D = any> {
    status: number;
    statusText: string;
    headers: IHttpHeaders;
    data: D;
  }
  declare export interface IFetchResponse<D = any> {
    status: number;
    statusText: string;
    headers: any;
    json(): IPromise<D>;
    body: any;
  }
  declare export interface IHttpRequest {
    url?: string;
    method?: $Values<typeof HttpMethod>;
    headers?: IHttpHeaders;
    params?: any;
    body?: any;
    data?: any;
  }
  declare export interface IFetch<
    Req: IHttpRequest = IHttpRequest,
    Res: IFetchResponse<> = IFetchResponse<>
  > {
    <D>(
      url: string,
      req?: Req
    ): IPromise<{ ...$Diff<Res, { json: any }>, ...IFetchResponse<D> }>;
  }
  declare export interface IHttpReqPerform<
    Req = IHttpRequest,
    Res = IHttpResponse<>
  > {
    <D>(
      url: string,
      body?: any,
      req?: Req
    ): IPromise<{ ...$Diff<Res, { data: any }>, ...IHttpResponse<D> }>;
    <D>(
      url: string,
      req?: Req
    ): IPromise<{ ...$Diff<Res, { data: any }>, ...IHttpResponse<D> }>;
  }
  declare export interface IHttpClient<
    Req: IHttpRequest = IHttpRequest,
    Res: IHttpResponse<> = IHttpResponse<>
  > {
    <D>(
      req: Req
    ): IPromise<{ ...$Diff<Res, { data: any }>, ...IHttpResponse<D> }>;
    <D>(
      url: string,
      req?: Req
    ): IPromise<{ ...$Diff<Res, { data: any }>, ...IHttpResponse<D> }>;
    get: IHttpReqPerform<Req, Res>;
    post: IHttpReqPerform<Req, Res>;
    put: IHttpReqPerform<Req, Res>;
    patch: IHttpReqPerform<Req, Res>;
    head: IHttpReqPerform<Req, Res>;
    delete: IHttpReqPerform<Req, Res>;
    options: IHttpReqPerform<Req, Res>;
  }
  declare export type IHttpRequestProvider = IFetch<> | IHttpClient<>;
}

declare module "@qiwi/substrate-types/target/es5/IClientEventDto" {
  import type { RecursivePartial } from "@qiwi/substrate-types/target/es5/helpers";

  import type { IDeviceInfo } from "@qiwi/substrate-types/target/es5/IDeviceInfo";

  import type { LogLevel } from "@qiwi/substrate-types/target/es5/ILogger";

  declare export var EnvironmentProfile: {|
    +CI: "ci", // "ci"
    +DEV: "development", // "development"
    +TEST: "testing", // "testing"
    +PROD: "prod", // "prod"
    +STAGE: "staging", // "staging"
  |};

  declare type TClientEventMeta = RecursivePartial<{
    appName: string,
    appHost: string,
    appVersion: string,
    appNamespace: string,
    appConfig: { [key: string]: any, ... },
    envProfile: $Values<typeof EnvironmentProfile>,
    deviceInfo: IDeviceInfo,
    userAgent: string,
    ...
  }>;
  declare export type IClientEventMeta = TClientEventMeta;
  declare export interface IClientEventDto {
    message: string;
    tags?: Array<string>;
    code?: string;
    level?: $Values<typeof LogLevel>;
    meta?: IClientEventMeta;
    details?: { [key: string]: any, ... };
    stacktrace?: any;
    timestamp?: number | string;
    ttl?: number;
  }
}

declare module "@qiwi/substrate-types/target/es5/INormalValue" {
  import type { UnionToIntersection } from "@qiwi/substrate-types/target/es5/helpers";

  import type { IAnyMap } from "@qiwi/substrate-types/target/es5/IAnyMap";

  declare export interface IIdentified {
    id: string | number | Symbol;
  }
  declare export type IWrappedValue<V = any, W = Object> = {
    ...$FlowGen$If<
      $FlowGen$Assignable<W, { [key: string]: any }[]>,
      UnionToIntersection<$ElementType<W, number>>,
      $FlowGen$If<
        $FlowGen$Assignable<W, { [key: string]: any }>,
        W,
        { [key: string]: any }
      >
    >,
    ...{
      value: V,
      ...
    },
  };
  declare export type ITyped<T = any> = {
    type: T,
    ...
  };
  declare export type ITypedValue<V = any, T = any> = IWrappedValue<
    V,
    ITyped<T>
  >;
  declare export type IMeted<M: IAnyMap = IAnyMap> = {
    meta: M,
    ...
  };
  declare export type IMetedValue<
    V = any,
    M: IAnyMap = IAnyMap
  > = IWrappedValue<V, IMeted<M>>;
  declare export type IMetaTyped<T = any, M: IAnyMap = IAnyMap> = {
    ...ITyped<T>,
    ...IMeted<M>,
  };
  declare export type IMetaTypedValue<
    V = any,
    T = any,
    M: IAnyMap = IAnyMap
  > = IWrappedValue<V, IMetaTyped<T, M>>;
  declare export type INormalValue<
    V = any,
    T = any,
    M: IAnyMap = IAnyMap
  > = IWrappedValue<V, [IMetaTyped<T, M>, IIdentified]>;
}

declare module "@qiwi/substrate-types/target/es5/IFunction" {
  declare export type IFunction<A: any[] = any[], R = any> = (...args: A) => R;
  declare export type IFn<A: any[] = any[], R = any> = IFunction<A, R>;
  declare export type ICallable<A: any[] = any[], R = any> = IFunction<A, R>;
  declare export type IUnaryFunction<A = any, R = any> = (a: A) => R;
  declare export type IUnaryFn<A = any, R = any> = IUnaryFunction<A, R>;
}

declare module "@qiwi/substrate-types/target/es5/IMetadata" {
  declare export interface IMetadataProvider {
    defineMetadata(
      metadataKey: any,
      metadataValue: any,
      target: any,
      propertyKey?: string | Symbol
    ): void;
    hasMetadata(
      metadataKey: any,
      target: any,
      propertyKey?: string | Symbol
    ): boolean;
    getMetadata(
      metadataKey: any,
      target: any,
      propertyKey?: string | Symbol
    ): any;
    getOwnMetadata(
      metadataKey: any,
      target: any,
      propertyKey?: string | Symbol
    ): any;
  }
}

declare module "@qiwi/substrate-types/target/es5/IEnableable" {
  declare export interface IEnableable {
    enable(): void;
    disable(): void;
  }
}

declare module "@qiwi/substrate-types/target/es5/IPipeline" {
  import type { IUnaryFn } from "@qiwi/substrate-types/target/es5/IFunction";

  import type { INormalValue } from "@qiwi/substrate-types/target/es5/INormalValue";

  declare export type IPipe<E = any> = IUnaryFn<E, E>;
  declare export type IPipeline<P: IPipe<> = IPipe<>> = Array<P>;
  declare export type INormalPipe<E: INormalValue = INormalValue> = IPipe<E>;
  declare export type INormalPipeline<P: INormalPipe<> = INormalPipe<>> =
    IPipeline<P>;
}

declare module "@qiwi/substrate-types/target/es5/IExtra" {
  declare export type IExtra<K: string, V> = $ObjMapi<
    { [k: K]: any },
    <key>(key) => V
  >;
}

declare module "@qiwi/substrate-types/target/es5/INil" {
  declare export type INil = null | void;
  declare export type INullOrUndefined = INil;
  declare export type INullable<T = any> = T | null;
  declare export type INilable<T = any> = T | INil;
}

declare module "@qiwi/substrate-types/target/es5/IExecutionMode" {
  declare export var IExecutionMode: {|
    +SYNC: "sync", // "sync"
    +ASYNC: "async", // "async"
  |};
}

declare module "@qiwi/substrate-types/target/es5/IDeviceInfo" {
  import type { RecursivePartial } from "@qiwi/substrate-types/target/es5/helpers";

  declare export type IBrowserInfo = RecursivePartial<{
    name: string | null,
    version: string | null,
    layout: string | null,
    ...
  }>;
  declare export type IOperationalSystemInfo = RecursivePartial<{
    name: string | null,
    architecture: number | null,
    family: string | null,
    version: string | null,
    ...
  }>;
  declare export type IDeviceInfoStrict = RecursivePartial<{
    browser: IBrowserInfo,
    model: {
      name: string | null,
      manufacturer: string | null,
      ...
    },
    isMobile: boolean,
    os: IOperationalSystemInfo,
    ...
  }>;
  declare export type IDeviceInfo =
    | IDeviceInfoStrict
    | { [key: string]: any, ... };
}
