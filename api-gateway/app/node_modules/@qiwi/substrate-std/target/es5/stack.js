"use strict";
/** @module @qiwi/substrate-std */
/** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
var tslib_1 = require("tslib");
/**
 * Standard stack implementation
 */
var Stack = /** @class */ (function () {
    function Stack() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // super(...args)
        this._storage = tslib_1.__spreadArray([], args, true);
    }
    Stack.prototype.get = function (index) {
        return this._storage[+index];
    };
    Stack.prototype.push = function () {
        var _a;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        (_a = this._storage).push.apply(_a, items);
        return items[items.length - 1];
    };
    Stack.prototype.pop = function () {
        return this._storage.pop();
    };
    Stack.prototype.shift = function () {
        return this._storage.shift();
    };
    Stack.prototype.unshift = function () {
        var _a;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        (_a = this._storage).unshift.apply(_a, items);
        return items[0];
    };
    Object.defineProperty(Stack.prototype, "size", {
        get: function () {
            return this._storage.length;
        },
        enumerable: false,
        configurable: true
    });
    Stack.prototype.remove = function (index) {
        var idx = +index;
        var found = this._storage[+idx];
        this._storage.splice(idx, 1);
        return found;
    };
    Stack.prototype.last = function () {
        return this._storage[this.size - 1];
    };
    Stack.prototype.first = function () {
        return this._storage[0];
    };
    Stack.prototype.toArray = function () {
        return tslib_1.__spreadArray([], this._storage, true);
    };
    Stack.prototype.clear = function () {
        this._storage.length = 0;
    };
    Stack.prototype.indexOf = function (item) {
        return this._storage.indexOf(item);
    };
    Stack.prototype.add = function (index, item) {
        this._storage[+index] = item;
        return item;
    };
    Stack.prototype.isEmpty = function () {
        return this.size > 0;
    };
    return Stack;
}());
exports.Stack = Stack;
//# sourceMappingURL=stack.js.map