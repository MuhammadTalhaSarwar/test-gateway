"use strict";
/** @module @qiwi/consul-service-discovery */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsulDiscoveryService = void 0;
var tslib_1 = require("tslib");
var consulUtils_1 = require("./consulUtils");
var cxt_1 = require("./cxt");
var defaults_1 = require("./defaults");
var util_1 = require("./util");
tslib_1.__exportStar(require("./interface"), exports);
tslib_1.__exportStar(require("./defaults"), exports);
/**
 * @class ConsulDiscoveryService
 */
var ConsulDiscoveryService = /** @class */ (function () {
    function ConsulDiscoveryService(_a, cxt) {
        var host = _a.host, port = _a.port, secure = _a.secure, defaults = _a.defaults, ca = _a.ca;
        if (cxt === void 0) { cxt = {}; }
        this.services = {
            discovery: {},
            kv: {}
        };
        this.cxt = (0, cxt_1.createContext)(cxt);
        this._consul = this.cxt.Consul({
            secure: secure,
            host: host,
            port: port === null || port === void 0 ? void 0 : port.toString(),
            defaults: defaults,
            ca: ca
        });
    }
    ConsulDiscoveryService.prototype.getKv = function (key) {
        return this.ready(key, 'kv').then(function (_a) {
            var data = _a.data;
            return data;
        });
    };
    ConsulDiscoveryService.prototype.setKv = function (data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._consul.kv.set(data, function (err, res) {
                if (err) {
                    reject(err);
                }
                resolve(res);
            });
        });
    };
    ConsulDiscoveryService.prototype.ready = function (serviceName, type) {
        var service = this.getService(serviceName, type);
        if (service.iop) {
            // @ts-ignore
            return service.iop.promise;
        }
        service.iop = (0, util_1.promiseFactory)();
        this.cxt.logger.debug("watcher initialized, service=".concat(serviceName));
        consulUtils_1.ConsulUtils.watchOnError(service, this.services[type], this.cxt.logger);
        consulUtils_1.ConsulUtils.watchOnChange(service, this.services[type], this.cxt.logger);
        return service.iop.promise;
    };
    ConsulDiscoveryService.prototype.getService = function (serviceName, type) {
        return this.services[type][serviceName] || this.createService(serviceName, type);
    };
    ConsulDiscoveryService.prototype.createService = function (serviceName, type) {
        var watcher = this.getWatcher(serviceName, type);
        var service = type === 'kv' ? {
            type: type,
            name: serviceName,
            watcher: watcher,
            data: {},
            sequentialErrorCount: 0
        } : {
            type: type,
            name: serviceName,
            watcher: watcher,
            data: [],
            sequentialErrorCount: 0
        };
        this.services[type][serviceName] = service;
        return service;
    };
    /**
     * Gets all service connections.
     * @param {string} serviceName
     * @return {Array<IConnectionParams>}
     */
    ConsulDiscoveryService.prototype.getConnections = function (serviceName) {
        return this.ready(serviceName, 'discovery').then(function (_a) {
            var data = _a.data;
            return data;
        });
    };
    /**
     * Gets random service connection.
     * @param {string} serviceName
     * @returns {IConnectionParams | undefined}
     */
    ConsulDiscoveryService.prototype.getConnection = function (serviceName) {
        return this.getConnections(serviceName).then(util_1.sample);
    };
    /**
     * @deprecated
     * @param {string} serviceName
     * @returns {IConnectionParams | undefined}
     */
    ConsulDiscoveryService.prototype.getConnectionParams = function (serviceName) {
        return this.getConnection(serviceName);
    };
    ConsulDiscoveryService.prototype.getWatcher = function (serviceName, type) {
        var method = type === 'kv' ? this._consul.kv.get : this._consul.health.service;
        var options = type === 'kv'
            ? {
                key: serviceName
            }
            : {
                service: serviceName,
                passing: true
            };
        return this._consul.watch({
            method: method,
            options: options,
            backoffMax: defaults_1.BACKOFF_MAX
        });
    };
    ConsulDiscoveryService.prototype.register = function (opts, registerCheckInterval) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var reg, register;
            return tslib_1.__generator(this, function (_a) {
                reg = this._register.bind(this);
                if (registerCheckInterval) {
                    if (this._repeatableRegister) {
                        this._repeatableRegister.cancel();
                    }
                    this._repeatableRegister = (0, util_1.repeat)(reg, registerCheckInterval);
                }
                register = this._repeatableRegister || reg;
                return [2 /*return*/, register(opts)];
            });
        });
    };
    ConsulDiscoveryService.prototype._register = function (opts) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, _opts, agentService, register;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = this._id ||
                            consulUtils_1.ConsulUtils.generateId({
                                serviceName: opts.name,
                                remoteAddress: opts.address,
                                port: opts.port
                            });
                        this._id = id;
                        _opts = tslib_1.__assign({ id: id }, opts);
                        return [4 /*yield*/, this.find(id)];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, Promise.resolve(void 0)];
                        }
                        agentService = this._consul.agent.service;
                        register = agentService.register.bind(agentService);
                        return [2 /*return*/, consulUtils_1.ConsulUtils.promisify(register, _opts)
                                .then(function (data) {
                                _this.cxt.logger.info("service ".concat(id, " registered"));
                                return data;
                            })
                                .catch(function (e) {
                                _this.cxt.logger.error("failed to register ".concat(id));
                                throw e;
                            })];
                }
            });
        });
    };
    ConsulDiscoveryService.prototype.list = function (token) {
        var opts = token ? { token: token } : {};
        var agentService = this._consul.agent.service;
        var getList = this._consul.agent.service.list.bind(agentService);
        return consulUtils_1.ConsulUtils.promisify(getList, opts);
    };
    ConsulDiscoveryService.prototype.find = function (id) {
        return this.list()
            .then(function (res) { return res[id]; })
            .catch(function (e) {
            throw new Error("fail find service: ".concat(e));
        });
    };
    return ConsulDiscoveryService;
}());
exports.ConsulDiscoveryService = ConsulDiscoveryService;
exports.default = ConsulDiscoveryService;
