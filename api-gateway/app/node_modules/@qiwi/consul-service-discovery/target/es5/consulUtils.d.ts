import { IConnectionParams, IConsulKvValue, IEntryPoint, IGenerateIdOpts, ILogger, INormalizedConsulKvValue, IServiceDiscoveryEntry, IServiceEntry } from './interface';
export declare class ConsulUtils {
    static promisify(method: any, opts: any): Promise<any>;
    static generateId({ serviceName, localAddress, port, remoteAddress }: IGenerateIdOpts): string;
    static normalizeKvValue(data: IConsulKvValue): INormalizedConsulKvValue;
    static normalizeEntryPoint(data: IEntryPoint[]): IConnectionParams[];
    static handleKvValue(data: INormalizedConsulKvValue, services: any, service: IServiceEntry, logger: ILogger): void;
    static handleConnectionParams(data: IConnectionParams[], services: any, service: IServiceDiscoveryEntry, logger: ILogger): void;
    static watchOnChange(service: IServiceEntry, services: Record<string, IServiceEntry>, logger: ILogger): void;
    static watchOnError(service: IServiceEntry, services: Record<string, IServiceEntry>, logger: ILogger): void;
    static handleError(service: IServiceEntry, err: any, services: Record<string, IServiceEntry>, logger: ILogger): void;
    static clearService(services: Record<string, IServiceEntry>, service: IServiceEntry): void;
}
