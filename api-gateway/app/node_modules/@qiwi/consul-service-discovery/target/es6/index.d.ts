/** @module @qiwi/consul-service-discovery */
import { IPromise } from '@qiwi/substrate';
import { ConsulOptions } from 'consul';
import { IConnectionParams, IConsulClient, IConsulClientWatch, IConsulDiscoveryService, IConsulEntries, IConsulKvSetOptions, ICxt, ILibConfig, INormalizedConsulKvValue, IServiceDiscoveryEntry, IServiceKvEntry, IServiceName, IServiceType, TConsulAgentServiceRegisterOptions } from './interface';
export * from './interface';
export * from './defaults';
/**
 * @class ConsulDiscoveryService
 */
export declare class ConsulDiscoveryService implements IConsulDiscoveryService {
    services: IConsulEntries;
    cxt: ICxt;
    protected _consul: IConsulClient;
    private _id?;
    private _repeatableRegister?;
    constructor({ host, port, secure, defaults, ca }: ConsulOptions, cxt?: ILibConfig);
    getKv(key: string): Promise<INormalizedConsulKvValue>;
    setKv(data: IConsulKvSetOptions): IPromise<boolean>;
    ready<T extends IServiceType>(serviceName: string, type: T): IPromise<T extends 'discovery' ? IServiceDiscoveryEntry : IServiceKvEntry>;
    getService(serviceName: IServiceName, type: IServiceType): IServiceDiscoveryEntry | IServiceKvEntry;
    createService(serviceName: IServiceName, type: IServiceType): IServiceDiscoveryEntry | IServiceKvEntry;
    /**
     * Gets all service connections.
     * @param {string} serviceName
     * @return {Array<IConnectionParams>}
     */
    getConnections(serviceName: string): Promise<Array<IConnectionParams>>;
    /**
     * Gets random service connection.
     * @param {string} serviceName
     * @returns {IConnectionParams | undefined}
     */
    getConnection(serviceName: string): Promise<IConnectionParams | undefined>;
    /**
     * @deprecated
     * @param {string} serviceName
     * @returns {IConnectionParams | undefined}
     */
    getConnectionParams(serviceName: string): Promise<IConnectionParams | undefined>;
    getWatcher(serviceName: IServiceName, type: IServiceType): IConsulClientWatch;
    register(opts: TConsulAgentServiceRegisterOptions, registerCheckInterval?: number): Promise<any>;
    private _register;
    list(token?: string): Promise<any>;
    find(id: any): Promise<any>;
}
export default ConsulDiscoveryService;
