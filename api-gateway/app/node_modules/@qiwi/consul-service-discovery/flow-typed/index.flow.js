/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.19.0
 */

// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

declare module "@qiwi/consul-service-discovery" {
  declare export * from "@qiwi/consul-service-discovery/target/es6";
}

declare module "@qiwi/consul-service-discovery/target/es6" {
  import type { IPromise } from "@qiwi/substrate";

  import type { ConsulOptions } from "consul";

  import type {
    IConnectionParams,
    IConsulClient,
    IConsulClientWatch,
    IConsulDiscoveryService,
    IConsulEntries,
    IConsulKvSetOptions,
    ICxt,
    ILibConfig,
    INormalizedConsulKvValue,
    IServiceDiscoveryEntry,
    IServiceKvEntry,
    IServiceName,
    IServiceType,
    TConsulAgentServiceRegisterOptions,
  } from "@qiwi/consul-service-discovery/target/es6/interface";

  declare export * from "@qiwi/consul-service-discovery/target/es6/interface";

  declare export * from "@qiwi/consul-service-discovery/target/es6/defaults";

  /**
   * @class ConsulDiscoveryService
   */
  declare export class ConsulDiscoveryService mixins IConsulDiscoveryService {
    services: IConsulEntries;
    cxt: ICxt;
    _consul: IConsulClient;
    constructor(x: ConsulOptions, cxt?: ILibConfig): this;
    getKv(key: string): Promise<INormalizedConsulKvValue>;
    setKv(data: IConsulKvSetOptions): IPromise<boolean>;
    ready<T: IServiceType>(
      serviceName: string,
      type: T
    ): IPromise<
      $FlowGen$If<
        $FlowGen$Assignable<T, "discovery">,
        IServiceDiscoveryEntry,
        IServiceKvEntry
      >
    >;
    getService(
      serviceName: IServiceName,
      type: IServiceType
    ): IServiceDiscoveryEntry | IServiceKvEntry;
    createService(
      serviceName: IServiceName,
      type: IServiceType
    ): IServiceDiscoveryEntry | IServiceKvEntry;

    /**
     * Gets all service connections.
     * @param {string} serviceName
     * @return {Array<IConnectionParams>}
     */
    getConnections(serviceName: string): Promise<Array<IConnectionParams>>;

    /**
     * Gets random service connection.
     * @param {string} serviceName
     * @returns {IConnectionParams | void}
     */
    getConnection(serviceName: string): Promise<IConnectionParams | void>;

    /**
     * @deprecated
     * @param {string} serviceName
     * @returns {IConnectionParams | void}
     */
    getConnectionParams(serviceName: string): Promise<IConnectionParams | void>;
    getWatcher(
      serviceName: IServiceName,
      type: IServiceType
    ): IConsulClientWatch;
    register(
      opts: TConsulAgentServiceRegisterOptions,
      registerCheckInterval?: number
    ): Promise<any>;
    list(token?: string): Promise<any>;
    find(id: any): Promise<any>;
  }
  declare export default typeof ConsulDiscoveryService;
}

declare module "@qiwi/consul-service-discovery/target/es6/interface" {
  import type { ILogger, IPromise, IPromiseConstructor } from "@qiwi/substrate";

  import typeof * as Consul from "consul";

  import type { TInsideOutPromise } from "inside-out-promise";

  declare export { ILogger, IPromise, IPromiseConstructor };

  declare export type IConsulClientWatch = {
    end(): void,
    ...
  } & global$NodeJS$EventEmitter;

  declare export interface IConsulServiceHealth {
    service: any;
  }
  declare export type TConsulAgentServiceRegisterOptions =
    Consul.Agent.Service.RegisterOptions;
  declare export type TConsulAgentCheckListOptions =
    Consul.Agent.Check.ListOptions;
  declare export interface IConsulAgentService {
    /**
     * Registers a new local service
     */
    register: {
      <TData>(
        opts: TConsulAgentServiceRegisterOptions,
        callback: Consul.Callback<TData>
      ): void,
      ...
    };
    list: {
      <TData>(
        opts: TConsulAgentCheckListOptions,
        callback: Consul.Callback<TData>
      ): void,
      ...
    };
  }
  declare export interface IConsulAgent {
    service: IConsulAgentService;
    [key: string]: any;
  }
  declare export type IConsulKvSetOptions = {
    key: string,
    value: string | Buffer,
    dc?: string,
    flags?: number,
    cas?: string,
    acquire?: string,
    release?: string,
    token?: string,
    ...
  };
  declare export interface IConsulClient {
    watch(opts: Consul.Watch.Options): IConsulClientWatch;
    health: IConsulServiceHealth;
    agent: IConsulAgent;
    kv: any;
  }
  declare export interface IConsulClientFactory {
    (opts?: Consul.ConsulOptions): IConsulClient;
  }
  declare export interface ICxt {
    Consul: IConsulClientFactory;
    Promise: any;
    logger: ILogger;
    timeout: number;
  }
  declare export interface IConnectionParams {
    port: string;
    host: string;
    secure?: boolean;
    timeout?: number;
    host: string;
    port: string;
  }
  declare export interface INormalizedConsulKvValue {
    createIndex?: number;
    modifyIndex?: number;
    lockIndex?: number;
    key?: string;
    flags?: number;
    value?: string | null;
  }
  declare export interface IConsulEntries {
    discovery: {
      [key: string]: IServiceDiscoveryEntry,
      ...
    };
    kv: {
      [key: string]: IServiceKvEntry,
      ...
    };
  }
  declare export interface IConsulDiscoveryService {
    cxt: ICxt;
    services: IConsulEntries;
    id?: string;
    getConnectionParams(serviceName: string): Promise<IConnectionParams | void>;
    getKv(key: string): Promise<INormalizedConsulKvValue>;
  }
  declare export interface IEntryPoint {
    Service: {
      Address: string,
      Port: string,
      ...
    };
    Node: {
      Address: string,
      ...
    };
  }
  declare export interface IConsulKvValue {
    CreateIndex: number;
    ModifyIndex: number;
    LockIndex: number;
    Key: string;
    Flags: number;
    Value: string;
  }
  declare export interface ILibConfig {
    Promise?: any;
    logger?: ILogger;
    Consul?: IConsulClientFactory;
    timeout?: number;
  }
  declare export type IServiceName = string;
  declare export type IDiscoveryServiceType = "discovery";
  declare export type IKvServiceType = "kv";
  declare export type IServiceType = IDiscoveryServiceType | IKvServiceType;
  declare export type IServiceDiscoveryEntry = {
    type: IDiscoveryServiceType,
    name: IServiceName,
    watcher: IConsulClientWatch,
    sequentialErrorCount: number,
    iop?: TInsideOutPromise<IServiceDiscoveryEntry>,
    data: Array<IConnectionParams>,
    ...
  };
  declare export type IServiceKvEntry = {
    type: IKvServiceType,
    name: IServiceName,
    watcher: IConsulClientWatch,
    sequentialErrorCount: number,
    iop?: TInsideOutPromise<IServiceDiscoveryEntry>,
    data: INormalizedConsulKvValue,
    ...
  };
  declare export type IServiceEntry = IServiceKvEntry | IServiceDiscoveryEntry;
  declare export type IGenerateIdOpts = {
    serviceName: string,
    port?: string | number,
    localAddress?: string,
    remoteAddress?: string,
    ...
  };
}

declare module "@qiwi/consul-service-discovery/target/es6/defaults" {
  declare export var DEFAULT_TIMEOUT: 10000;
  declare export var BACKOFF_MAX: 20000;
  declare export var WATCH_ERROR_LIMIT: 20;
}

declare module "@qiwi/consul-service-discovery/target/es5" {
  import type { IPromise } from "@qiwi/substrate";

  import type { ConsulOptions } from "consul";

  import type {
    IConnectionParams,
    IConsulClient,
    IConsulClientWatch,
    IConsulDiscoveryService,
    IConsulEntries,
    IConsulKvSetOptions,
    ICxt,
    ILibConfig,
    INormalizedConsulKvValue,
    IServiceDiscoveryEntry,
    IServiceKvEntry,
    IServiceName,
    IServiceType,
    TConsulAgentServiceRegisterOptions,
  } from "@qiwi/consul-service-discovery/target/es5/interface";

  declare export * from "@qiwi/consul-service-discovery/target/es5/interface";

  declare export * from "@qiwi/consul-service-discovery/target/es5/defaults";

  /**
   * @class ConsulDiscoveryService
   */
  declare export class ConsulDiscoveryService mixins IConsulDiscoveryService {
    services: IConsulEntries;
    cxt: ICxt;
    _consul: IConsulClient;
    constructor(x: ConsulOptions, cxt?: ILibConfig): this;
    getKv(key: string): Promise<INormalizedConsulKvValue>;
    setKv(data: IConsulKvSetOptions): IPromise<boolean>;
    ready<T: IServiceType>(
      serviceName: string,
      type: T
    ): IPromise<
      $FlowGen$If<
        $FlowGen$Assignable<T, "discovery">,
        IServiceDiscoveryEntry,
        IServiceKvEntry
      >
    >;
    getService(
      serviceName: IServiceName,
      type: IServiceType
    ): IServiceDiscoveryEntry | IServiceKvEntry;
    createService(
      serviceName: IServiceName,
      type: IServiceType
    ): IServiceDiscoveryEntry | IServiceKvEntry;

    /**
     * Gets all service connections.
     * @param {string} serviceName
     * @return {Array<IConnectionParams>}
     */
    getConnections(serviceName: string): Promise<Array<IConnectionParams>>;

    /**
     * Gets random service connection.
     * @param {string} serviceName
     * @returns {IConnectionParams | void}
     */
    getConnection(serviceName: string): Promise<IConnectionParams | void>;

    /**
     * @deprecated
     * @param {string} serviceName
     * @returns {IConnectionParams | void}
     */
    getConnectionParams(serviceName: string): Promise<IConnectionParams | void>;
    getWatcher(
      serviceName: IServiceName,
      type: IServiceType
    ): IConsulClientWatch;
    register(
      opts: TConsulAgentServiceRegisterOptions,
      registerCheckInterval?: number
    ): Promise<any>;
    list(token?: string): Promise<any>;
    find(id: any): Promise<any>;
  }
  declare export default typeof ConsulDiscoveryService;
}

declare module "@qiwi/consul-service-discovery/target/es5/interface" {
  import type { ILogger, IPromise, IPromiseConstructor } from "@qiwi/substrate";

  import typeof * as Consul from "consul";

  import type { TInsideOutPromise } from "inside-out-promise";

  declare export { ILogger, IPromise, IPromiseConstructor };

  declare export type IConsulClientWatch = {
    end(): void,
    ...
  } & global$NodeJS$EventEmitter;

  declare export interface IConsulServiceHealth {
    service: any;
  }
  declare export type TConsulAgentServiceRegisterOptions =
    Consul.Agent.Service.RegisterOptions;
  declare export type TConsulAgentCheckListOptions =
    Consul.Agent.Check.ListOptions;
  declare export interface IConsulAgentService {
    /**
     * Registers a new local service
     */
    register: {
      <TData>(
        opts: TConsulAgentServiceRegisterOptions,
        callback: Consul.Callback<TData>
      ): void,
      ...
    };
    list: {
      <TData>(
        opts: TConsulAgentCheckListOptions,
        callback: Consul.Callback<TData>
      ): void,
      ...
    };
  }
  declare export interface IConsulAgent {
    service: IConsulAgentService;
    [key: string]: any;
  }
  declare export type IConsulKvSetOptions = {
    key: string,
    value: string | Buffer,
    dc?: string,
    flags?: number,
    cas?: string,
    acquire?: string,
    release?: string,
    token?: string,
    ...
  };
  declare export interface IConsulClient {
    watch(opts: Consul.Watch.Options): IConsulClientWatch;
    health: IConsulServiceHealth;
    agent: IConsulAgent;
    kv: any;
  }
  declare export interface IConsulClientFactory {
    (opts?: Consul.ConsulOptions): IConsulClient;
  }
  declare export interface ICxt {
    Consul: IConsulClientFactory;
    Promise: any;
    logger: ILogger;
    timeout: number;
  }
  declare export interface IConnectionParams {
    port: string;
    host: string;
    secure?: boolean;
    timeout?: number;
    host: string;
    port: string;
  }
  declare export interface INormalizedConsulKvValue {
    createIndex?: number;
    modifyIndex?: number;
    lockIndex?: number;
    key?: string;
    flags?: number;
    value?: string | null;
  }
  declare export interface IConsulEntries {
    discovery: {
      [key: string]: IServiceDiscoveryEntry,
      ...
    };
    kv: {
      [key: string]: IServiceKvEntry,
      ...
    };
  }
  declare export interface IConsulDiscoveryService {
    cxt: ICxt;
    services: IConsulEntries;
    id?: string;
    getConnectionParams(serviceName: string): Promise<IConnectionParams | void>;
    getKv(key: string): Promise<INormalizedConsulKvValue>;
  }
  declare export interface IEntryPoint {
    Service: {
      Address: string,
      Port: string,
      ...
    };
    Node: {
      Address: string,
      ...
    };
  }
  declare export interface IConsulKvValue {
    CreateIndex: number;
    ModifyIndex: number;
    LockIndex: number;
    Key: string;
    Flags: number;
    Value: string;
  }
  declare export interface ILibConfig {
    Promise?: any;
    logger?: ILogger;
    Consul?: IConsulClientFactory;
    timeout?: number;
  }
  declare export type IServiceName = string;
  declare export type IDiscoveryServiceType = "discovery";
  declare export type IKvServiceType = "kv";
  declare export type IServiceType = IDiscoveryServiceType | IKvServiceType;
  declare export type IServiceDiscoveryEntry = {
    type: IDiscoveryServiceType,
    name: IServiceName,
    watcher: IConsulClientWatch,
    sequentialErrorCount: number,
    iop?: TInsideOutPromise<IServiceDiscoveryEntry>,
    data: Array<IConnectionParams>,
    ...
  };
  declare export type IServiceKvEntry = {
    type: IKvServiceType,
    name: IServiceName,
    watcher: IConsulClientWatch,
    sequentialErrorCount: number,
    iop?: TInsideOutPromise<IServiceDiscoveryEntry>,
    data: INormalizedConsulKvValue,
    ...
  };
  declare export type IServiceEntry = IServiceKvEntry | IServiceDiscoveryEntry;
  declare export type IGenerateIdOpts = {
    serviceName: string,
    port?: string | number,
    localAddress?: string,
    remoteAddress?: string,
    ...
  };
}

declare module "@qiwi/consul-service-discovery/target/es5/defaults" {
  declare export var DEFAULT_TIMEOUT: 10000;
  declare export var BACKOFF_MAX: 20000;
  declare export var WATCH_ERROR_LIMIT: 20;
}
