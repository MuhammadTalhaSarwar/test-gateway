declare module '@qiwi/consul-service-discovery' {
  /** */
  export * from '@qiwi/consul-service-discovery/target/es6';
}
// Generated by dts-bundle v0.7.5
// Dependencies for this module:
//   ../../../../../../home/runner/work/consul-service-discovery/consul-service-discovery/@qiwi/substrate
//   ../../../../../../home/runner/work/consul-service-discovery/consul-service-discovery/consul
//   ../../../../../../home/runner/work/consul-service-discovery/consul-service-discovery/inside-out-promise

declare module '@qiwi/consul-service-discovery/target/es6' {
    /** @module @qiwi/consul-service-discovery */
    import { IPromise } from '@qiwi/substrate';
    import { ConsulOptions } from 'consul';
    import { IConnectionParams, IConsulClient, IConsulClientWatch, IConsulDiscoveryService, IConsulEntries, IConsulKvSetOptions, ICxt, ILibConfig, INormalizedConsulKvValue, IServiceDiscoveryEntry, IServiceKvEntry, IServiceName, IServiceType, TConsulAgentServiceRegisterOptions } from '@qiwi/consul-service-discovery/target/es6/interface';
    export * from '@qiwi/consul-service-discovery/target/es6/interface';
    export * from '@qiwi/consul-service-discovery/target/es6/defaults';
    /**
      * @class ConsulDiscoveryService
      */
    export class ConsulDiscoveryService implements IConsulDiscoveryService {
        services: IConsulEntries;
        cxt: ICxt;
        protected _consul: IConsulClient;
        constructor({ host, port, secure, defaults, ca }: ConsulOptions, cxt?: ILibConfig);
        getKv(key: string): Promise<INormalizedConsulKvValue>;
        setKv(data: IConsulKvSetOptions): IPromise<boolean>;
        ready<T extends IServiceType>(serviceName: string, type: T): IPromise<T extends 'discovery' ? IServiceDiscoveryEntry : IServiceKvEntry>;
        getService(serviceName: IServiceName, type: IServiceType): IServiceDiscoveryEntry | IServiceKvEntry;
        createService(serviceName: IServiceName, type: IServiceType): IServiceDiscoveryEntry | IServiceKvEntry;
        /**
          * Gets all service connections.
          * @param {string} serviceName
          * @return {Array<IConnectionParams>}
          */
        getConnections(serviceName: string): Promise<Array<IConnectionParams>>;
        /**
          * Gets random service connection.
          * @param {string} serviceName
          * @returns {IConnectionParams | undefined}
          */
        getConnection(serviceName: string): Promise<IConnectionParams | undefined>;
        /**
          * @deprecated
          * @param {string} serviceName
          * @returns {IConnectionParams | undefined}
          */
        getConnectionParams(serviceName: string): Promise<IConnectionParams | undefined>;
        getWatcher(serviceName: IServiceName, type: IServiceType): IConsulClientWatch;
        register(opts: TConsulAgentServiceRegisterOptions, registerCheckInterval?: number): Promise<any>;
        list(token?: string): Promise<any>;
        find(id: any): Promise<any>;
    }
    export default ConsulDiscoveryService;
}

declare module '@qiwi/consul-service-discovery/target/es6/interface' {
    /** @module @qiwi/consul-service-discovery */
    import { ILogger, IPromise, IPromiseConstructor } from '@qiwi/substrate';
    import * as Consul from 'consul';
    import { TInsideOutPromise } from 'inside-out-promise';
    export { ILogger, IPromise, IPromiseConstructor };
    export interface IConsulClientWatch extends NodeJS.EventEmitter {
        end(): void;
    }
    export interface IConsulServiceHealth {
        service: any;
    }
    export type TConsulAgentServiceRegisterOptions = Consul.Agent.Service.RegisterOptions;
    export type TConsulAgentCheckListOptions = Consul.Agent.Check.ListOptions;
    export interface IConsulAgentService {
        /**
          * Registers a new local service
          */
        register: {
            <TData>(opts: TConsulAgentServiceRegisterOptions, callback: Consul.Callback<TData>): void;
        };
        list: {
            <TData>(opts: TConsulAgentCheckListOptions, callback: Consul.Callback<TData>): void;
        };
    }
    export interface IConsulAgent {
        service: IConsulAgentService;
        [key: string]: any;
    }
    export type IConsulKvSetOptions = {
        key: string;
        value: string | Buffer;
        dc?: string;
        flags?: number;
        cas?: string;
        acquire?: string;
        release?: string;
        token?: string;
    };
    export interface IConsulClient {
        watch(opts: Consul.Watch.Options): IConsulClientWatch;
        health: IConsulServiceHealth;
        agent: IConsulAgent;
        kv: any;
    }
    export interface IConsulClientFactory {
        (opts?: Consul.ConsulOptions): IConsulClient;
    }
    export interface ICxt {
        Consul: IConsulClientFactory;
        Promise: any;
        logger: ILogger;
        timeout: number;
    }
    export interface IConnectionParams {
        port: string;
        host: string;
        secure?: boolean;
        timeout?: number;
    }
    export interface INormalizedConsulKvValue {
        createIndex?: number;
        modifyIndex?: number;
        lockIndex?: number;
        key?: string;
        flags?: number;
        value?: string | null;
    }
    export interface IConsulEntries {
        discovery: {
            [key: string]: IServiceDiscoveryEntry;
        };
        kv: {
            [key: string]: IServiceKvEntry;
        };
    }
    export interface IConsulDiscoveryService {
        cxt: ICxt;
        services: IConsulEntries;
        id?: string;
        getConnectionParams(serviceName: string): Promise<IConnectionParams | undefined>;
        getKv(key: string): Promise<INormalizedConsulKvValue>;
    }
    export interface IConnectionParams {
        host: string;
        port: string;
    }
    export interface IEntryPoint {
        Service: {
            Address: string;
            Port: string;
        };
        Node: {
            Address: string;
        };
    }
    export interface IConsulKvValue {
        CreateIndex: number;
        ModifyIndex: number;
        LockIndex: number;
        Key: string;
        Flags: number;
        Value: string;
    }
    export interface ILibConfig {
        Promise?: any;
        logger?: ILogger;
        Consul?: IConsulClientFactory;
        timeout?: number;
    }
    export type IServiceName = string;
    export type IDiscoveryServiceType = 'discovery';
    export type IKvServiceType = 'kv';
    export type IServiceType = IDiscoveryServiceType | IKvServiceType;
    export type IServiceDiscoveryEntry = {
        type: IDiscoveryServiceType;
        name: IServiceName;
        watcher: IConsulClientWatch;
        sequentialErrorCount: number;
        iop?: TInsideOutPromise<IServiceDiscoveryEntry>;
        data: Array<IConnectionParams>;
    };
    export type IServiceKvEntry = {
        type: IKvServiceType;
        name: IServiceName;
        watcher: IConsulClientWatch;
        sequentialErrorCount: number;
        iop?: TInsideOutPromise<IServiceDiscoveryEntry>;
        data: INormalizedConsulKvValue;
    };
    export type IServiceEntry = IServiceKvEntry | IServiceDiscoveryEntry;
    export type IGenerateIdOpts = {
        serviceName: string;
        port?: string | number;
        localAddress?: string;
        remoteAddress?: string;
    };
}

declare module '@qiwi/consul-service-discovery/target/es6/defaults' {
    export const DEFAULT_TIMEOUT = 10000;
    export const BACKOFF_MAX = 20000;
    export const WATCH_ERROR_LIMIT = 20;
}

// Generated by dts-bundle v0.7.5
// Dependencies for this module:
//   ../../../../../../home/runner/work/consul-service-discovery/consul-service-discovery/@qiwi/substrate
//   ../../../../../../home/runner/work/consul-service-discovery/consul-service-discovery/consul
//   ../../../../../../home/runner/work/consul-service-discovery/consul-service-discovery/inside-out-promise

declare module '@qiwi/consul-service-discovery/target/es5' {
    /** @module @qiwi/consul-service-discovery */
    import { IPromise } from '@qiwi/substrate';
    import { ConsulOptions } from 'consul';
    import { IConnectionParams, IConsulClient, IConsulClientWatch, IConsulDiscoveryService, IConsulEntries, IConsulKvSetOptions, ICxt, ILibConfig, INormalizedConsulKvValue, IServiceDiscoveryEntry, IServiceKvEntry, IServiceName, IServiceType, TConsulAgentServiceRegisterOptions } from '@qiwi/consul-service-discovery/target/es5/interface';
    export * from '@qiwi/consul-service-discovery/target/es5/interface';
    export * from '@qiwi/consul-service-discovery/target/es5/defaults';
    /**
      * @class ConsulDiscoveryService
      */
    export class ConsulDiscoveryService implements IConsulDiscoveryService {
        services: IConsulEntries;
        cxt: ICxt;
        protected _consul: IConsulClient;
        constructor({ host, port, secure, defaults, ca }: ConsulOptions, cxt?: ILibConfig);
        getKv(key: string): Promise<INormalizedConsulKvValue>;
        setKv(data: IConsulKvSetOptions): IPromise<boolean>;
        ready<T extends IServiceType>(serviceName: string, type: T): IPromise<T extends 'discovery' ? IServiceDiscoveryEntry : IServiceKvEntry>;
        getService(serviceName: IServiceName, type: IServiceType): IServiceDiscoveryEntry | IServiceKvEntry;
        createService(serviceName: IServiceName, type: IServiceType): IServiceDiscoveryEntry | IServiceKvEntry;
        /**
          * Gets all service connections.
          * @param {string} serviceName
          * @return {Array<IConnectionParams>}
          */
        getConnections(serviceName: string): Promise<Array<IConnectionParams>>;
        /**
          * Gets random service connection.
          * @param {string} serviceName
          * @returns {IConnectionParams | undefined}
          */
        getConnection(serviceName: string): Promise<IConnectionParams | undefined>;
        /**
          * @deprecated
          * @param {string} serviceName
          * @returns {IConnectionParams | undefined}
          */
        getConnectionParams(serviceName: string): Promise<IConnectionParams | undefined>;
        getWatcher(serviceName: IServiceName, type: IServiceType): IConsulClientWatch;
        register(opts: TConsulAgentServiceRegisterOptions, registerCheckInterval?: number): Promise<any>;
        list(token?: string): Promise<any>;
        find(id: any): Promise<any>;
    }
    export default ConsulDiscoveryService;
}

declare module '@qiwi/consul-service-discovery/target/es5/interface' {
    /** @module @qiwi/consul-service-discovery */
    import { ILogger, IPromise, IPromiseConstructor } from '@qiwi/substrate';
    import * as Consul from 'consul';
    import { TInsideOutPromise } from 'inside-out-promise';
    export { ILogger, IPromise, IPromiseConstructor };
    export interface IConsulClientWatch extends NodeJS.EventEmitter {
        end(): void;
    }
    export interface IConsulServiceHealth {
        service: any;
    }
    export type TConsulAgentServiceRegisterOptions = Consul.Agent.Service.RegisterOptions;
    export type TConsulAgentCheckListOptions = Consul.Agent.Check.ListOptions;
    export interface IConsulAgentService {
        /**
          * Registers a new local service
          */
        register: {
            <TData>(opts: TConsulAgentServiceRegisterOptions, callback: Consul.Callback<TData>): void;
        };
        list: {
            <TData>(opts: TConsulAgentCheckListOptions, callback: Consul.Callback<TData>): void;
        };
    }
    export interface IConsulAgent {
        service: IConsulAgentService;
        [key: string]: any;
    }
    export type IConsulKvSetOptions = {
        key: string;
        value: string | Buffer;
        dc?: string;
        flags?: number;
        cas?: string;
        acquire?: string;
        release?: string;
        token?: string;
    };
    export interface IConsulClient {
        watch(opts: Consul.Watch.Options): IConsulClientWatch;
        health: IConsulServiceHealth;
        agent: IConsulAgent;
        kv: any;
    }
    export interface IConsulClientFactory {
        (opts?: Consul.ConsulOptions): IConsulClient;
    }
    export interface ICxt {
        Consul: IConsulClientFactory;
        Promise: any;
        logger: ILogger;
        timeout: number;
    }
    export interface IConnectionParams {
        port: string;
        host: string;
        secure?: boolean;
        timeout?: number;
    }
    export interface INormalizedConsulKvValue {
        createIndex?: number;
        modifyIndex?: number;
        lockIndex?: number;
        key?: string;
        flags?: number;
        value?: string | null;
    }
    export interface IConsulEntries {
        discovery: {
            [key: string]: IServiceDiscoveryEntry;
        };
        kv: {
            [key: string]: IServiceKvEntry;
        };
    }
    export interface IConsulDiscoveryService {
        cxt: ICxt;
        services: IConsulEntries;
        id?: string;
        getConnectionParams(serviceName: string): Promise<IConnectionParams | undefined>;
        getKv(key: string): Promise<INormalizedConsulKvValue>;
    }
    export interface IConnectionParams {
        host: string;
        port: string;
    }
    export interface IEntryPoint {
        Service: {
            Address: string;
            Port: string;
        };
        Node: {
            Address: string;
        };
    }
    export interface IConsulKvValue {
        CreateIndex: number;
        ModifyIndex: number;
        LockIndex: number;
        Key: string;
        Flags: number;
        Value: string;
    }
    export interface ILibConfig {
        Promise?: any;
        logger?: ILogger;
        Consul?: IConsulClientFactory;
        timeout?: number;
    }
    export type IServiceName = string;
    export type IDiscoveryServiceType = 'discovery';
    export type IKvServiceType = 'kv';
    export type IServiceType = IDiscoveryServiceType | IKvServiceType;
    export type IServiceDiscoveryEntry = {
        type: IDiscoveryServiceType;
        name: IServiceName;
        watcher: IConsulClientWatch;
        sequentialErrorCount: number;
        iop?: TInsideOutPromise<IServiceDiscoveryEntry>;
        data: Array<IConnectionParams>;
    };
    export type IServiceKvEntry = {
        type: IKvServiceType;
        name: IServiceName;
        watcher: IConsulClientWatch;
        sequentialErrorCount: number;
        iop?: TInsideOutPromise<IServiceDiscoveryEntry>;
        data: INormalizedConsulKvValue;
    };
    export type IServiceEntry = IServiceKvEntry | IServiceDiscoveryEntry;
    export type IGenerateIdOpts = {
        serviceName: string;
        port?: string | number;
        localAddress?: string;
        remoteAddress?: string;
    };
}

declare module '@qiwi/consul-service-discovery/target/es5/defaults' {
    export const DEFAULT_TIMEOUT = 10000;
    export const BACKOFF_MAX = 20000;
    export const WATCH_ERROR_LIMIT = 20;
}

