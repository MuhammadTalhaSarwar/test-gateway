import{__decorate}from"tslib";import bind from"bind-decorator";import{TPromiseState}from"./interface";import{noop,setProto}from"./util";export*from"./interface";export const factory=(t,e)=>new InsideOutPromise(t,e);Object.defineProperty(factory,"Promise",{get:()=>InsideOutPromise.Promise,set(t){setProto(InsideOutPromise.prototype,t.prototype),InsideOutPromise.Promise=t}});export class InsideOutPromise{constructor(t,e){let s,r;this.state=TPromiseState.PENDING;const i=InsideOutPromise.normalizeOpts(t,e),o=i.Promise,n=i.executor;return InsideOutPromise.contextify(new o(((t,e)=>{s=t,r=e,n(t,e)})),{state:TPromiseState.PENDING,_P:o,_resolve:s,_reject:r})}get promise(){return this}get status(){return this.state}get result(){return this.isFulfilled()?this.value:this.isRejected()?this.reason:void 0}resolve(t){return this._resolve(t),this}reject(t){return this._reject(t),this}then(t,e){return InsideOutPromise.contextify(this,this,"then",t,e)}catch(t){return InsideOutPromise.contextify(this,this,"catch",t)}finally(t){return this._P.prototype.finally?InsideOutPromise.contextify(this,this,"finally",t):this.then(t).catch(t)}isPending(){return this.state===TPromiseState.PENDING}isFulfilled(){return this.state===TPromiseState.FULFILLED}isRejected(){return this.state===TPromiseState.REJECTED}isResolved(){return!this.isPending()}get[Symbol.toStringTag](){return this.constructor.name}get[Symbol.species](){return Promise}static get[Symbol.species](){return Promise}static get[Symbol.toStringTag](){return this.name}static contextify(t,e,s,...r){const i=s?e._P.prototype[s].call(t,...r):t;return Object.assign(setProto(this.observe(i),this.prototype),e)}static observe(t){const e=t.then((t=>(Object.assign(e,{value:t,state:TPromiseState.FULFILLED}),t)),(t=>{throw Object.assign(e,{reason:t,state:TPromiseState.REJECTED}),t}));return e}static normalizeOpts(t,e={}){const s="function"==typeof t?Object.assign(Object.assign({},e),{executor:t}):t||e;return Object.assign({Promise:InsideOutPromise.Promise,executor:noop},s)}}InsideOutPromise.Promise=Promise,__decorate([bind],InsideOutPromise.prototype,"resolve",null),__decorate([bind],InsideOutPromise.prototype,"reject",null),factory.Promise=Promise;